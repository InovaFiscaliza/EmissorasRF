# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/03_aero.ipynb.

# %% auto 0
__all__ = ['Aero']

# %% ../../nbs/03_aero.ipynb 3
import os
from typing import List, Union, Iterable
from functools import cached_property


import numpy as np
import pandas as pd
from dotenv import find_dotenv, load_dotenv
from fastcore.xtras import Path
from fastcore.parallel import parallel

from .icao import get_icao
from .aisweb import get_aisw
from .aisgeo import get_aisg
from .redemet import get_redemet
from .base import Base
from ..format import merge_on_frequency

# %% ../../nbs/03_aero.ipynb 4
load_dotenv(find_dotenv())


# %% ../../nbs/03_aero.ipynb 6
class Aero(Base):
	"""Classe auxiliar para agregar os dados das APIs aeronáuticas"""

	def __init__(self, read_cache: bool = False):
		super().__init__(read_cache=read_cache)

	@property
	def stem(self):
		return 'aero'

	@property
	def columns(self):
		return ['Frequência', 'Latitude', 'Longitude', 'Entidade', 'Fonte']

	def extraction(self) -> Iterable:
		func = lambda f: f()
		radares = pd.read_csv(Path(__file__).parent / 'arquivos' / 'radares.csv')
		radares['Fonte'] = 'RADAR'
		sources = [get_icao, get_aisw, get_aisg, get_redemet]
		dfs = parallel(func, sources, threadpool=True, progress=False)
		dfs.append(radares)
		return dfs

	def update(self):
		if self.read_cache:
			self.df = self._read(self.stem)
		else:
			df = self.extraction()
			self.df = self._format(df)

	def _format(
		self,
		dfs: List,  # List with the individual API sources
	) -> Union[pd.DataFrame, None]:  # Processed DataFrame
		if dfs:
			icao = dfs.pop(0)
			for df in dfs:
				icao = merge_on_frequency(icao, df)

			icao = icao.sort_values(by=icao.columns.to_list(), ignore_index=True)
			icao = icao.drop_duplicates(
				subset=['Frequência', 'Latitude', 'Longitude'],
				keep='last',
				ignore_index=True,
			)
			icao = icao.astype(
				{
					'Frequência': 'float',
					'Latitude': 'float',
					'Longitude': 'float',
					'Entidade': 'string',
				}
			)
			icao.loc[np.isclose(icao.Longitude, -472.033447), 'Longitude'] = -47.2033447
			icao.loc[np.isclose(icao.Longitude, 69.934998), 'Longitude'] = -69.934998
			icao['Multiplicidade'] = 1
			return icao
