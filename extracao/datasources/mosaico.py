# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/01d_mosaico.ipynb.

# %% auto 0
__all__ = ['MONGO_URI', 'Mosaico']

# %% ../../nbs/01d_mosaico.ipynb 3
import os

import pandas as pd
from dotenv import find_dotenv, load_dotenv
from fastcore.foundation import GetAttr

from .connectors import MongoDB
from .base import Base

# %% ../../nbs/01d_mosaico.ipynb 4
load_dotenv(find_dotenv())

# %% ../../nbs/01d_mosaico.ipynb 6
MONGO_URI: str = os.environ.get("MONGO_URI")

# %% ../../nbs/01d_mosaico.ipynb 7
class Mosaico(Base, GetAttr):
    def __init__(self, mongo_uri: str = MONGO_URI):
        self.database = "sms"
        self.default = MongoDB(mongo_uri)

    @property
    def collection(self):
        raise NotImplementedError(
            "Subclasses devem implementar a propriedade 'collection'"
        )

    @property
    def query(self):
        raise NotImplementedError("Subclasses devem implementar a propriedade 'query'")

    @property
    def projection(self):
        raise NotImplementedError(
            "Subclasses devem implementar a propriedade 'projection'"
        )

    def _extract(self, collection: str, pipeline: list):
        client = self.connect()
        database = client[self.database]
        collection = database[collection]
        result = collection.aggregate(pipeline)
        return pd.DataFrame(list(result))
        # df = df.drop(columns=["_id"])
        # return df

    @staticmethod
    def split_designacao(
        df: pd.DataFrame,  # DataFrame com coluna original DesignacaoEmissao
    ) -> (
        pd.DataFrame
    ):  # DataFrame com novas colunas Largura_Emissão(kHz) e Classe_Emissão
        """Parse a bandwidth string
        It returns the numerical component and a character class
        """
        df["Designação_Emissão"] = (
            df["Designação_Emissão"]
            .str.replace(",", " ")
            .str.strip()
            .str.upper()
            .str.split(" ")
        )
        df = df.explode("Designação_Emissão")
        df = df[df["Designação_Emissão"] != "/"]  # Removes empty rows
        # Apply the parse_bw function
        parsed_data = zip(*df["Designação_Emissão"].apply(Base.parse_bw))
        df["Largura_Emissão(kHz)"], df["Classe_Emissão"] = parsed_data
        return df.drop("Designação_Emissão", axis=1)
