[
  {
    "objectID": "constants.html#listas",
    "href": "constants.html#listas",
    "title": "Constantes",
    "section": "Listas",
    "text": "Listas"
  },
  {
    "objectID": "constants.html#dicionários",
    "href": "constants.html#dicionários",
    "title": "Constantes",
    "section": "Dicionários",
    "text": "Dicionários"
  },
  {
    "objectID": "constants.html#queries",
    "href": "constants.html#queries",
    "title": "Constantes",
    "section": "QUERIES",
    "text": "QUERIES"
  },
  {
    "objectID": "constants.html#regex",
    "href": "constants.html#regex",
    "title": "Constantes",
    "section": "Regex",
    "text": "Regex"
  },
  {
    "objectID": "constants.html#demais-constantes",
    "href": "constants.html#demais-constantes",
    "title": "Constantes",
    "section": "Demais Constantes",
    "text": "Demais Constantes"
  },
  {
    "objectID": "connectors.html",
    "href": "connectors.html",
    "title": "Conectores",
    "section": "",
    "text": "# Insert in Path Project Directory\nsys.path.insert(0, str(Path().cwd().parent))\nos.chdir(Path.cwd().parent / 'extracao')"
  },
  {
    "objectID": "updates.html",
    "href": "updates.html",
    "title": "Atualização",
    "section": "",
    "text": "# Insert in Path Project Directory\nsys.path.insert(0, str(Path().cwd().parent))"
  },
  {
    "objectID": "updates.html#conexão-com-o-banco-de-dados",
    "href": "updates.html#conexão-com-o-banco-de-dados",
    "title": "Atualização",
    "section": "Conexão com o banco de dados",
    "text": "Conexão com o banco de dados\nA função a seguir é um wrapper simples que utiliza o pyodbc para se conectar ao banco de dados base da Anatel e retorna o objeto da conexão\n\nsource\n\nconnect_db\n\n connect_db (server:str='ANATELBDRO05', database:str='SITARWEB',\n             trusted_conn:str='yes', mult_results:bool=True)\n\nConecta ao Banco server e retorna o ‘cursor’ (iterador) do Banco\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nserver\nstr\nANATELBDRO05\nServidor do Banco de Dados\n\n\ndatabase\nstr\nSITARWEB\nNome do Banco de Dados\n\n\ntrusted_conn\nstr\nyes\nConexão Segura: yes | no\n\n\nmult_results\nbool\nTrue\nMúltiplos Resultados\n\n\nReturns\nConnection\n\n\n\n\n\n\nfrom fastcore.test import test_eq\n\n\n#echo: false\ndef test_connection():\n    conn = connect_db()\n    cursor = conn.cursor()\n    for query in (SQL_RADCOM,SQL_STEL):\n        cursor.execute(query)\n        test_eq(type(cursor.fetchone()), pyodbc.Row)\n\n\ntest_connection()\n\n\nsource\n\n\nclean_mosaico\n\n clean_mosaico (df:pandas.core.frame.DataFrame,\n                pasta:Union[str,pathlib.Path])\n\nClean the merged dataframe with the data from the MOSAICO page\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ndf\nDataFrame\nDataFrame com os dados de Estações e Plano_Básico mesclados\n\n\npasta\nUnion\n\n\n\nReturns\nDataFrame\nDataFrame com os dados mesclados e limpos"
  },
  {
    "objectID": "updates.html#atualização-das-bases-de-dados",
    "href": "updates.html#atualização-das-bases-de-dados",
    "title": "Atualização",
    "section": "Atualização das bases de dados",
    "text": "Atualização das bases de dados\nAs bases de dados são atualizadas atráves das funções a seguir, o único argumento passado em todas elas é a pasta na qual os arquivos locais processados serão salvos, os nomes dos arquivos são padronizados e não podem ser editados para que as funções de leitura e processamento recebam somente a pasta na qual esses arquivos foram salvos.\n\nRADCOM\n\nsource\n\n\nupdate_radcom\n\n update_radcom (conn:pyodbc.Connection, folder:Union[str,pathlib.Path])\n\nAtualiza a tabela local retornada pela query RADCOM, com tratamento de erro de conectividade.\n\n\n\n\nType\nDetails\n\n\n\n\nconn\nConnection\nObjeto de conexão de banco\n\n\nfolder\nUnion\nPasta onde salvar os arquivos\n\n\nReturns\nDataFrame\nDataFrame com os dados atualizados\n\n\n\n\nimport warnings\nimport os\n# warnings.filterwarnings(\"ignore\", message='install \"ipywidgets\" for Jupyter support')\nwarnings.filterwarnings(\"ignore\")\n\n\nfolder = Path.cwd().parent / 'dados'\nconn = connect_db()\n\nCPU times: total: 0 ns\nWall time: 4.01 ms\n\n\n\nradcom = update_radcom(conn, folder)\nradcom.sample(5)\n\n\n\n\n\n\n\nCPU times: total: 547 ms\nWall time: 1.22 s\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n      UF\n      Latitude\n      Longitude\n      Classe\n      Num_Serviço\n      Classe_Emissão\n      Largura_Emissão(kHz)\n      Validade_RF\n      Status\n      Fonte\n      Multiplicidade\n    \n  \n  \n    \n      2154\n      87.9\n      ASSOCIACAO CULTURAL COMUNITARIA SIMONENSE\n      50014035022\n      631438289\n      São Simão\n      3550902\n      SP\n      -21.479722222222165\n      -47.55694444444433\n      3\n      231\n      <NA>\n      256\n      <NA>\n      RADCOM\n      SRD\n      1\n    \n    \n      2126\n      87.9\n      ASSOCIACAO COM.BENEF.NOSSA SRA.DA CONCEICAO-RA...\n      50011838558\n      659050722\n      Pereiras\n      3537503\n      SP\n      -23.075833333333332\n      -47.969444444444335\n      3-A\n      231\n      <NA>\n      256\n      <NA>\n      RADCOM\n      SRD\n      1\n    \n    \n      2354\n      98.3\n      ASSOCIAÇÃO DE RADIODIFUSÃO COMUNITÁRIA ARNORED...\n      50407724672\n      699363594\n      Governador Celso Ramos\n      4206009\n      SC\n      -27.3155555555555\n      -48.5480555555555\n      P-A\n      231\n      <NA>\n      256\n      <NA>\n      RADCOM\n      SRD\n      1\n    \n    \n      3248\n      104.9\n      ASSOCIACAO COMUNITARIA DE SANTO ANTONIO DO MONTE\n      50013840010\n      684040328\n      Santo Antônio do Monte\n      3160405\n      MG\n      -20.087777777777667\n      -45.29388888888883\n      3-B\n      231\n      <NA>\n      256\n      <NA>\n      RADCOM\n      SRD\n      1\n    \n    \n      2042\n      87.9\n      ASSOCIACAO COMUNIT. PRO-DESENV. CULT. E ARTIST...\n      50011314303\n      631374922\n      Caconde\n      3508702\n      SP\n      -21.538333333333334\n      -46.648611111111\n      3\n      231\n      <NA>\n      256\n      <NA>\n      RADCOM\n      SRD\n      1\n    \n  \n\n\n\n\n\n\nSTEL\n\nsource\n\n\nupdate_stel\n\n update_stel (conn:pyodbc.Connection, folder:Union[str,pathlib.Path])\n\nAtualiza a tabela local retornada pela query STEL, com tratamento de erro de conectividade.\n\n\n\n\nType\nDetails\n\n\n\n\nconn\nConnection\nObjeto de conexão de banco\n\n\nfolder\nUnion\nPasta onde salvar os arquivos\n\n\nReturns\nDataFrame\nDataFrame com os dados atualizados\n\n\n\n\nstel = update_stel(conn, folder)\nstel.sample(5)\n\n\n\n\n\n\n\nCPU times: total: 3.98 s\nWall time: 29.6 s\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n      UF\n      Latitude\n      Longitude\n      Classe\n      Num_Serviço\n      Classe_Emissão\n      Largura_Emissão(kHz)\n      Validade_RF\n      Status\n      Fonte\n      Multiplicidade\n    \n  \n  \n    \n      23384\n      767.0\n      TELEVISAO RIO FORMOSO LTDA\n      13030154475\n      3298213\n      Miranorte\n      1713304\n      TO\n      -9.535833333333333\n      -48.576111111111\n      TX\n      728\n      C3F\n      6000.0\n      1997-10-20\n      L\n      STEL\n      1\n    \n    \n      14150\n      156.55\n      VOPAK BRASIL S.A.\n      50415542502\n      1006008893\n      Santos\n      3548500\n      SP\n      -23.926388888888834\n      -46.372777777777664\n      FC\n      604\n      F3E\n      11.0\n      2037-10-07\n      L\n      STEL\n      1\n    \n    \n      31795\n      25.375\n      EDIFICIO DOUBLE SPACE FARIA LIMA\n      50403887305\n      688907423\n      São Paulo\n      3550308\n      SP\n      -23.591116666666668\n      -46.68056944444433\n      TX\n      060\n      F3E\n      16.0\n      2016-10-24\n      L\n      STEL\n      1\n    \n    \n      2056\n      131.875\n      AZUL LINHAS AEREAS BRASILEIRAS S.A\n      50405707169\n      1009310787\n      São Gonçalo do Amarante\n      2412005\n      RN\n      -5.763611111111\n      -35.37222222222216\n      FA\n      507\n      A3E\n      6.0\n      2029-01-07\n      L\n      STEL\n      1\n    \n    \n      20432\n      156.75\n      PETROLEO BRASILEIRO S A PETROBRAS\n      50411168908\n      700046925\n      Santos\n      3548500\n      SP\n      -25.266938888888834\n      -45.252811111111\n      FC\n      604\n      G3E\n      16.0\n      2033-12-03\n      L\n      STEL\n      1"
  },
  {
    "objectID": "updates.html#mosaico",
    "href": "updates.html#mosaico",
    "title": "Atualização",
    "section": "MOSAICO",
    "text": "MOSAICO\n\nsource\n\nsplit_designacao\n\n split_designacao (df:pandas.core.frame.DataFrame)\n\nParse a bandwidth string to extract the numerical component and a character class\n\n\nSRD\n\nsource\n\n\nupdate_srd\n\n update_srd (mongo_client:pymongo.mongo_client.MongoClient,\n             folder:Union[str,pathlib.Path])\n\nEfetua a query na tabela de Radiodifusão no banco mongoDB mongo_client e atualiza o arquivo local\n\n\n\n\nType\nDetails\n\n\n\n\nmongo_client\nMongoClient\nObjeto de conexão com o MongoDB\n\n\nfolder\nUnion\nPasta onde salvar os arquivos\n\n\nReturns\nDataFrame\nDataFrame com os dados atualizados\n\n\n\n\nuri = os.environ['MONGO_URI']\nmongo_client = MongoClient(uri)\nmongo_client.server_info()\n\n{'version': '4.0.5',\n 'gitVersion': '3739429dd92b92d1b0ab120911a23d50bf03c412',\n 'targetMinOS': 'Windows 7/Windows Server 2008 R2',\n 'modules': [],\n 'allocator': 'tcmalloc',\n 'javascriptEngine': 'mozjs',\n 'sysInfo': 'deprecated',\n 'versionArray': [4, 0, 5, 0],\n 'openssl': {'running': 'Windows SChannel'},\n 'buildEnvironment': {'distmod': '2008plus-ssl',\n  'distarch': 'x86_64',\n  'cc': 'cl: Microsoft (R) C/C++ Optimizing Compiler Version 19.00.24223 for x64',\n  'ccflags': '/nologo /EHsc /W3 /wd4355 /wd4800 /wd4267 /wd4244 /wd4290 /wd4068 /wd4351 /wd4373 /we4013 /we4099 /we4930 /WX /errorReport:none /MD /O2 /Oy- /bigobj /utf-8 /Zc:rvalueCast /Zc:strictStrings /volatile:iso /Gw /Gy /Zc:inline',\n  'cxx': 'cl: Microsoft (R) C/C++ Optimizing Compiler Version 19.00.24223 for x64',\n  'cxxflags': '/TP',\n  'linkflags': '/nologo /DEBUG /INCREMENTAL:NO /LARGEADDRESSAWARE /OPT:REF',\n  'target_arch': 'x86_64',\n  'target_os': 'windows'},\n 'bits': 64,\n 'debug': False,\n 'maxBsonObjectSize': 16777216,\n 'storageEngines': ['devnull', 'ephemeralForTest', 'mmapv1', 'wiredTiger'],\n 'ok': 1.0}\n\n\n\nmosaico = update_srd(mongo_client, folder)\nmosaico.sample(5)\n\n\n\n\n\n\n\nCPU times: total: 3 s\nWall time: 3.75 s\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n      UF\n      Latitude\n      Longitude\n      Classe\n      Num_Serviço\n      Classe_Emissão\n      Largura_Emissão(kHz)\n      Validade_RF\n      Status\n      Fonte\n      Multiplicidade\n    \n  \n  \n    \n      6112\n      57.0\n      PREFEITURA MUNICIPAL DE SAO BONIFACIO\n      14023501395\n      323090044\n      São Bonifácio\n      4215901\n      SC\n      -27.9013888888888333\n      -48.9291666666666666\n      C\n      800\n      <NA>\n      6000.0\n      2018-12-31\n      TV-C7\n      MOS\n      1\n    \n    \n      10493\n      533.0\n      TELEVISAO INDEPENDENTE DE SAO JOSE DO RIO PRET...\n      50409648620\n      699602360\n      Cajazeiras\n      2503704\n      PB\n      -6.8947277777776666\n      -38.5508333333333333\n      A\n      801\n      <NA>\n      5700.0\n      2027-07-30\n      TV-C4\n      MOS\n      1\n    \n    \n      3721\n      213.0\n      PREFEITURA MUNICIPAL DE SONORA\n      50400553821\n      322828732\n      Sonora\n      5007935\n      MS\n      -17.5802777777776666\n      -54.7505555555555000\n      C\n      800\n      <NA>\n      6000.0\n      2018-12-31\n      TV-C7\n      MOS\n      1\n    \n    \n      16865\n      107.3\n      BRASIL AMAZONIA COMUNICACAO E EMPREENDIMENTOS ...\n      50001791109\n      323688144\n      Nova Timboteua\n      1505007\n      PA\n      -1.1997222222221666\n      -47.3977777777776666\n      A3\n      230\n      <NA>\n      256.0\n      2028-12-08\n      FM-C4\n      MOS\n      1\n    \n    \n      11089\n      521.0\n      TELEVISAO ANHANGUERA DE ARAGUAINA LTDA\n      50411145363\n      1005698659\n      Augustinópolis\n      1702554\n      TO\n      <NA>\n      <NA>\n      C\n      801\n      <NA>\n      5700.0\n      2028-10-03\n      TV-C3\n      MOS\n      1\n    \n  \n\n\n\n\n\n\nTELECOM\n\nsource\n\n\nupdate_telecom\n\n update_telecom (mongo_client:pymongo.mongo_client.MongoClient,\n                 folder:Union[str,pathlib.Path])\n\nEfetua a query na tabela licenciamento no banco mongoDB mongo_client e atualiza o arquivo local\n\n\n\n\nType\nDetails\n\n\n\n\nmongo_client\nMongoClient\nObjeto de conexão com o MongoDB\n\n\nfolder\nUnion\nPasta onde salvar os arquivos\n\n\nReturns\nDataFrame\nDataFrame com os dados atualizados\n\n\n\n\ntelecom = update_telecom(mongo_client, folder)\ntelecom.sample(5)\n# telecom = pd.read_parquet(folder / 'telecom.parquet.gzip')\n\n ⚠ Executando a query na base licenciamento do Mosaico, processo demorado! ⚠\n\n\n\nAttributeError: 'bool' object has no attribute 'iteritems'"
  },
  {
    "objectID": "updates.html#aeronautica",
    "href": "updates.html#aeronautica",
    "title": "Atualização",
    "section": "AERONAUTICA",
    "text": "AERONAUTICA\n\nsource\n\nupdate_aero\n\n update_aero (folder:Union[str,pathlib.Path])\n\nAtualiza a base de dados de emissões da aeronáutica\n\n\n\n\nType\nDetails\n\n\n\n\nfolder\nUnion\nPasta onde salvar os arquivos\n\n\nReturns\nDataFrame\nDataFrame com os dados atualizados\n\n\n\n\naero = update_aero(folder)\naero.sample(5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExpatError: junk after document element: line 39, column 16"
  },
  {
    "objectID": "updates.html#base-consolidada-anatel",
    "href": "updates.html#base-consolidada-anatel",
    "title": "Atualização",
    "section": "Base Consolidada ANATEL",
    "text": "Base Consolidada ANATEL\n\nsource\n\nvalidar_coords\n\n validar_coords (row:pandas.core.series.Series,\n                 connector:pyodbc.Connection=None)\n\nValida os dados de coordenadas e município em row no polígono dos municípios em banco corporativ do IBGE\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrow\nSeries\n\nLinha de um DataFrame\n\n\nconnector\nConnection\nNone\nConector de Banco de Dados\n\n\nReturns\nList\n\nDataFrame com dados do município\n\n\n\n\nsource\n\n\nupdate_cached_df\n\n update_cached_df (df:pandas.core.frame.DataFrame,\n                   df_cache:pandas.core.frame.DataFrame)\n\nMescla ambos dataframes eliminando os excluídos (existentes somente em df_cache)\n\nsource\n\n\nupdate_base\n\n update_base (conn:pyodbc.Connection,\n              clientMongoDB:pymongo.mongo_client.MongoClient,\n              folder:Union[str,pathlib.Path], conn_threads:bool=False)\n\nWrapper que atualiza opcionalmente lê e atualiza as 4 bases indicadas anteriormente, as combina e salva o arquivo consolidado na folder folder\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nconn\nConnection\n\nObjeto de conexão de banco\n\n\nclientMongoDB\nMongoClient\n\nObjeto de conexão com o MongoDB\n\n\nfolder\nUnion\n\nPasta onde salvar os arquivos\n\n\nconn_threads\nbool\nFalse\nFlag para criar uma conexão de banco por thread\n\n\nReturns\nDataFrame\n\nDataFrame com os dados atualizados\n\n\n\n\n# base = update_base(conn, mongo_client, folder)\n# base.sample(5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ⚠ Executando a query na base licenciamento do Mosaico, processo demorado! ⚠"
  },
  {
    "objectID": "format.html",
    "href": "format.html",
    "title": "Formatação",
    "section": "",
    "text": "source\n\nparse_bw\n\n parse_bw (bw:str)\n\nParse the bandwidth string\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nbw\nstr\nDesignação de Emissão (Largura + Classe) codificada como string\n\n\nReturns\nTuple\nLargura e Classe de Emissão\n\n\n\n\n\nMesclagem\nFunção auxiliar para mesclar registros que são iguais das diversas bases, i.e. estão a uma distância menor que MAX_DIST e verificar a validade da mesclagem\n\nsource\n\n\nmerge_on_frequency\n\n merge_on_frequency (df_left:pandas.core.frame.DataFrame,\n                     df_right:pandas.core.frame.DataFrame,\n                     on:str='Frequency', coords:Tuple[str]=('Latitude',\n                     'Longitude'), description:str='Description',\n                     suffixes:Tuple[str]=('_x', '_y'))\n\nMescla os dataframes baseados na frequência É assumido que as colunas de ambos uma é subconjunto ou idêntica à outra, caso contrário os filtros não irão funcionar como esperado\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf_left\nDataFrame\n\nDataFrame da esquerda a ser mesclado\n\n\ndf_right\nDataFrame\n\nDataFrame da direira a ser mesclado\n\n\non\nstr\nFrequency\nColuna usada como chave de mesclagem\n\n\ncoords\nTuple\n(‘Latitude’, ‘Longitude’)\n\n\n\ndescription\nstr\nDescription\n\n\n\nsuffixes\nTuple\n(’_x’, ’_y’)\nSufixo para as colunas que foram criadas\n\n\nReturns\nDataFrame\n\nDataFrame resultante da mesclagem\n\n\n\n\nsource\n\n\nget_km_distance\n\n get_km_distance (row)\n\n\nfolder = Path.cwd().parent / \"dados\""
  },
  {
    "objectID": "reading.html",
    "href": "reading.html",
    "title": "Leitura",
    "section": "",
    "text": "O mosaico atualmente é composto por 2 bases complementares originárias de um banco MongoDB:\n\n\nEstações\nPlano Básico\n\n\nsource\n\n\n\n read_srd (folder:Union[str,pathlib.Path],\n           conn:pymongo.mongo_client.MongoClient=None)\n\nLê o banco de dados salvo localmente do MOSAICO e opcionalmente o atualiza.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nconn\nMongoClient\nNone\nObjeto de Conexão com o banco MongoDB, atualiza os dados caso válido\n\n\nReturns\nDataFrame\n\nDataframe com os dados do mosaico\n\n\n\n\nfolder = Path.cwd().parent / 'dados'\n\n\nfrom extracao.constants import MIN_LAT, MAX_LAT, MIN_LONG, MAX_LONG\nfrom ydata_profiling import ProfileReport\n\n\nmosaico = read_srd(folder)\nfor c in ['Latitude', 'Longitude']:\n    mosaico[c] = mosaico[c].astype('float')\nmos_bad_coords = mosaico[~(mosaico.Latitude.between(MIN_LAT, MAX_LAT) | mosaico.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(f\"A base de radiodifusão do Mosaico possui {len(mos_bad_coords)} registros de coordenadas inválidas do total de {len(mosaico)}\")\n\nA base de radiodifusão do Mosaico possui 15809 registros de coordenadas inválidas do total de 30850\n\n\n\nmosaico['Frequência'] = mosaico['Frequência'].astype('category')\nmosaico_profile = ProfileReport(mosaico, config_file='report_config.yaml', title='MOSAICO')\nmosaico_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#licenciamento",
    "href": "reading.html#licenciamento",
    "title": "Leitura",
    "section": "LICENCIAMENTO",
    "text": "LICENCIAMENTO\n\nA Base licenciamento é composta de serviços privados de telecomunicações, tanto antigos migrados do STEL como novos para um novo banco de dados MongoDB\n\n\nsource\n\nread_telecom\n\n read_telecom (folder:Union[str,pathlib.Path],\n               conn:pymongo.mongo_client.MongoClient=None)\n\nLê o banco de dados salvo localmente do LICENCIAMENTO e opcionalmente o atualiza.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nconn\nMongoClient\nNone\nObjeto de Conexão com o banco MongoDB, atualiza os dados caso válido\n\n\nReturns\nDataFrame\n\nDataframe com os dados do mosaico\n\n\n\n\ntelecom = read_telecom(folder)\nfor c in ['Latitude', 'Longitude']:\n    telecom[c] = telecom[c].astype('float')\nmos_bad_coords = telecom[~(telecom.Latitude.between(MIN_LAT, MAX_LAT) | telecom.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(f\"A base licenciamento do Mosaico possui {len(mos_bad_coords)} registros de coordenadas inválidas do total de {len(telecom)}\")\n\nA base licenciamento do Mosaico possui 91 registros de coordenadas inválidas do total de 749602\n\n\n\ntelecom['Frequência'] = telecom['Frequência'].astype('category')\ntelecom_profile = ProfileReport(telecom, config_file='report_config.yaml', title='Telecomunicações')\ntelecom_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#radcom",
    "href": "reading.html#radcom",
    "title": "Leitura",
    "section": "RADCOM",
    "text": "RADCOM\n\nsource\n\nread_radcom\n\n read_radcom (folder:Union[str,pathlib.Path], conn:pyodbc.Connection=None)\n\nLê o banco de dados salvo localmente de RADCOM. Opcionalmente o atualiza pelo Banco de Dados ANATELBDRO05 caso update = True ou não exista o arquivo local\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nconn\nConnection\nNone\nObjeto de conexão de banco, atualiza os dados caso válido\n\n\nReturns\nDataFrame\n\nDataframe com os dados de RADCOM\n\n\n\n\nradcom = read_radcom(folder)\nfor c in ['Latitude', 'Longitude']:\n    radcom[c] = radcom[c].astype('float')\nmos_bad_coords = radcom[~(radcom.Latitude.between(MIN_LAT, MAX_LAT) | radcom.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(f\"A base radcom possui {len(mos_bad_coords)} registros de coordenadas inválidas do total de {len(radcom)}\")\n\nA base radcom possui 3 registros de coordenadas inválidas do total de 4972\n\n\n\nradcom['Frequência'] = radcom['Frequência'].astype('category')\nradcom_profile = ProfileReport(radcom, config_file='report_config.yaml', title='RADCOM')\nradcom_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#stel",
    "href": "reading.html#stel",
    "title": "Leitura",
    "section": "STEL",
    "text": "STEL\n\nsource\n\nread_stel\n\n read_stel (folder:Union[str,pathlib.Path], conn:pyodbc.Connection=None)\n\nLê o banco de dados salvo localmente do STEL. Opcionalmente o atualiza pelo Banco de Dados ANATELBDRO05 caso update = True ou não exista o arquivo local\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nconn\nConnection\nNone\nObjeto de conexão de banco. Atualiza os dados caso válido\n\n\nReturns\nDataFrame\n\nDataframe com os dados do STEL\n\n\n\n\nstel = read_stel(folder)\nfor c in ['Latitude', 'Longitude']:\n    stel[c] = stel[c].astype('float')\nmos_bad_coords = stel[~(stel.Latitude.between(MIN_LAT, MAX_LAT) | stel.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(f\"A base legada do Stel possui {len(mos_bad_coords)} registros de coordenadas inválidas do total de {len(stel)}\")\n\nA base legada do Stel possui 8 registros de coordenadas inválidas do total de 35434\n\n\n\nstel['Frequência'] = stel['Frequência'].astype('category')\nstel_profile = ProfileReport(stel, config_file='report_config.yaml', title='STEL')\nstel_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#bases-externas-da-aeronáutica",
    "href": "reading.html#bases-externas-da-aeronáutica",
    "title": "Leitura",
    "section": "Bases Externas da Aeronáutica",
    "text": "Bases Externas da Aeronáutica\n\nsource\n\nread_icao\n\n read_icao (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê a base de dados do Frequency Finder e Canalização VOR/ILS/DME\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nupdate\nbool\nFalse\nAtualiza os dados caso True\n\n\nReturns\nDataFrame\n\nDataframe com os dados do ICAO\n\n\n\n\nsource\n\n\nread_aisw\n\n read_aisw (folder:Union[str,pathlib.Path], update:bool=False)\n\nFontes da informação: AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nupdate\nbool\nFalse\nAtualiza os dados caso True\n\n\nReturns\nDataFrame\n\nDataframe com os dados do AISWEB\n\n\n\n\nsource\n\n\nread_aisg\n\n read_aisg (folder:Union[str,pathlib.Path], update:bool=False)\n\nFontes da informação: GEOAISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nupdate\nbool\nFalse\nAtualiza os dados caso True\n\n\nReturns\nDataFrame\n\nDataframe com os dados do GEOAISWEB\n\n\n\n\nsource\n\n\nread_redemet\n\n read_redemet (folder:Union[str,pathlib.Path], update:bool=False)\n\nFontes da informação: AISWEB, REDEMET, Ofício nº 2/SSARP/14410 e Canalização VOR/ILS/DME.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nupdate\nbool\nFalse\nAtualiza os dados caso True\n\n\nReturns\nDataFrame\n\nDataframe com os dados do AISWEB\n\n\n\n\nsource\n\n\nread_aero\n\n read_aero (folder:Union[str,pathlib.Path], update:bool=False)\n\nLê os arquivos de dados da aeronáutica e retorna os registros comuns e únicos\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\nPasta onde ler/salvar os dados\n\n\nupdate\nbool\nFalse\nAtualiza os dados caso True\n\n\nReturns\nDataFrame\n\n\n\n\n\n\naero = read_aero(folder)\nfor c in ['Latitude', 'Longitude']:\n    aero[c] = aero[c].astype('float')\nbad_coords = aero[~(aero.Latitude.between(MIN_LAT, MAX_LAT) | aero.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(f\"A base licenciamento do Mosaico possui {len(bad_coords)} registros de coordenadas inválidas do total de {len(aero)}\")\n\nA base licenciamento do Mosaico possui 0 registros de coordenadas inválidas do total de 2994\n\n\n\naero['Frequency'] = aero['Frequency'].astype('category')\naero_profile = ProfileReport(aero, config_file='report_config.yaml', title='AERONAUTICA')\naero_profile.to_notebook_iframe()"
  },
  {
    "objectID": "reading.html#base-consolidada",
    "href": "reading.html#base-consolidada",
    "title": "Leitura",
    "section": "Base Consolidada",
    "text": "Base Consolidada\n\nsource\n\nread_base\n\n read_base (folder:Union[str,pathlib.Path], conn:pyodbc.Connection=None,\n            clientMongoDB:pymongo.mongo_client.MongoClient=None)\n\nLê a base de dados e opcionalmente a atualiza antes da leitura casos as conexões de banco sejam válidas\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfolder\nUnion\n\n\n\n\nconn\nConnection\nNone\nObjeto de conexão do banco SQL Server\n\n\nclientMongoDB\nMongoClient\nNone\nObjeto de conexão do banco MongoDB\n\n\nReturns\nDataFrame\n\n\n\n\n\n\nbase = read_base(folder)\nbase['Frequência'] = base['Frequência'].astype('category')\nbase_profile = ProfileReport(base, config_file='report_config.yaml', title='Base Consolidada')\nbase_profile.to_notebook_iframe()"
  },
  {
    "objectID": "main.html",
    "href": "main.html",
    "title": "Principal",
    "section": "",
    "text": "source\n\nget_db\n\n get_db (path:Union[str,pathlib.Path], connSQL:pyodbc.Connection=None,\n         clientMongoDB:pymongo.mongo_client.MongoClient=None)\n\nLê e opcionalmente atualiza as bases da Anatel, mescla as bases da Aeronáutica, salva e retorna o arquivo A atualização junto às bases de dados da Anatel é efetuada caso ambos objetos de banco connSQL e clientMongoDB forem válidos`\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\npath\nUnion\n\nPasta onde salvar os arquivos”,\n\n\nconnSQL\nConnection\nNone\nObjeto de conexão do banco SQL Server\n\n\nclientMongoDB\nMongoClient\nNone\nObjeto de conexão do banco MongoDB\n\n\nReturns\nDataFrame\n\nRetorna o DataFrame com as bases da Anatel e da Aeronáutica\n\n\n\n\nimport os\nimport warnings\nfrom extracao.updates import connect_db\nimport numpy as np\nfrom geopy.distance import geodesic\n\n\nwarnings.filterwarnings(\"ignore\")\n\n\nfolder = Path.cwd().parent / 'dados'\n\n\n# conn = connect_db()\n# uri = os.environ['MONGO_URI']\n# mongo_client = MongoClient(uri)\n\n\n# os.chdir(f\"{Path.cwd().parent}/extracao/aero\")\ndf = get_db(folder)\n# df = get_db(folder) #, conn, mongo_client)\n# df = pd.read_parquet(folder / 'AnatelDB.parquet.gzip')\n\n📜Lendo as bases de dados da Anatel...\n\n\n\n✈Requisitando os dados da Aeronáutica.\n\n\n\n🥄Mesclando os dados da Aeronáutica.\n\n\n\n🗃Salvando os arquivos...\n\n\n\nSucesso ⚡\n\n\n\n\nfrom pandas_profiling import ProfileReport\ndf['Frequency'] = df['Frequency'].astype('category')\nprofile = ProfileReport(df, config_file= folder.parent / 'nbs/report_config.yaml')\nprofile.to_notebook_iframe()"
  },
  {
    "objectID": "icao.html",
    "href": "icao.html",
    "title": "ICAO",
    "section": "",
    "text": "Dados para acesso aos dados do ICAO\n\nsource\n\n\n\n convert_longitude (lon:str, hemisphere:str)\n\nConverte a longitude para formato decimal\n\n\n\n\nType\nDetails\n\n\n\n\nlon\nstr\nLongitude\n\n\nhemisphere\nstr\nHemisfério: W | E\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\n\n\n convert_latitude (lat:str, hemisphere:str)\n\nConverte a Latitude para formato decimal\n\n\n\n\nType\nDetails\n\n\n\n\nlat\nstr\nLatitude\n\n\nhemisphere\nstr\nHemisfério: N | S\n\n\nReturns\nfloat\n\n\n\n\n\nfrom fastcore.test import test_close\n\n\nlat = \"25D36'01\"\nlong = \"056D06'00\"\ntest_close(convert_latitude(lat, 'S'), -25.60027)\ntest_close(convert_longitude(long, 'W'), -56.10000)\n\n\nsource\n\n\n\n\n map_channels (df:pandas.core.frame.DataFrame, origem:str)\n\nMapeia os canais contidos em df e adiciona os registros ILS/DME caso houver\n\n\n\n\nType\nDetails\n\n\n\n\ndf\nDataFrame\nDataFrame dos dados de origem\n\n\norigem\nstr\nDescrição da emissão a ser substituída\n\n\nReturns\nDataFrame\n\n\n\n\n\nsource\n\n\n\n\n get_icao ()\n\nLê, concatena e pós-processa os arquivos do ICAO\n\nget_icao()\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      0\n      113.4\n      -9.866666666666667\n      -56.1\n      [ICAO] VOR/DME, ALTA FLORESTA\n    \n    \n      1\n      113.2\n      -3.25\n      -52.25\n      [ICAO] VOR/DME, ALTAMIRA\n    \n    \n      2\n      117.5\n      -4.183333333333334\n      -69.93333333333334\n      [ICAO] VOR/DME, AMAZONICA\n    \n    \n      3\n      115.4\n      -16.25\n      -49.0\n      [ICAO] VOR/DME, ANAPOLIS\n    \n    \n      4\n      112.0\n      -10.983333333333333\n      -37.06666666666667\n      [ICAO] VOR/DME, ARACAJU STA. MARIA\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      2626\n      1176\n      -20.766666666666666\n      -51.55\n      [DOC] VOR/DME, URUBUPUNGA CASTILHO (Ground-bas...\n    \n    \n      2627\n      1082.0\n      -12.7\n      -60.083333333333336\n      [DOC] VOR/DME, VILHENA (Airbone DME)\n    \n    \n      2628\n      1019\n      -12.7\n      -60.083333333333336\n      [DOC] VOR/DME, VILHENA (Ground-based DME)\n    \n    \n      2629\n      1126.0\n      -20.25\n      -40.28333333333333\n      [DOC] VOR/DME, VITORIA GOIABEIRAS (Airbone DME)\n    \n    \n      2630\n      1189\n      -20.25\n      -40.28333333333333\n      [DOC] VOR/DME, VITORIA GOIABEIRAS (Ground-base...\n    \n  \n\n2631 rows × 4 columns"
  },
  {
    "objectID": "aisweb.html",
    "href": "aisweb.html",
    "title": "AISWEB",
    "section": "",
    "text": "Dados para acesso à API AISWEB\n\nsource\n\n\n\n convert_longitude (lon:str)\n\nConverte a longitude para formato decimal\n\n\n\n\nType\nDetails\n\n\n\n\nlon\nstr\nLongitude\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\n\n\n convert_latitude (lat:str)\n\nConverte a Latitude para formato decimal\n\n\n\n\nType\nDetails\n\n\n\n\nlat\nstr\nLatitude\n\n\nReturns\nfloat\n\n\n\n\n\nsource\n\n\n\n\n AisWeb (api_key:str, api_pass:str, type_aero:Iterable[str]=['MIL',\n         'PRIV/PUB', 'PUB', 'PUB/MIL', 'PUB/REST'])\n\nClasse para encapsular requisições REST à API do AISWEB\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\napi_key\nstr\n\nChave API\n\n\napi_pass\nstr\n\nSenha API\n\n\ntype_aero\nIterable\n[‘MIL’, ‘PRIV/PUB’, ‘PUB’, ‘PUB/MIL’, ‘PUB/REST’]\nLista com os tipos de Aeroportos\n\n\n\n\nsource\n\n\n\n\n get_aisw ()\n\nLê e processa os dataframes individuais da API AISWEB e retorna o conjunto concatenado\n\nget_aisw()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      0\n      118.6\n      -3.145833333333\n      -59.985\n      [AISW] SBMN-COM, Torre, Campo Ponta Pelada\n    \n    \n      1\n      109.3\n      -3.1502777777777777\n      -59.98222222222223\n      [AISW] SBMN-NAV, ILS/DME 09 IPE, Campo Ponta P...\n    \n    \n      0\n      118.5\n      -29.945555555556\n      -51.143611111111\n      [AISW] SBCO-COM, Torre, CAMPO NOSSA SENHORA DE...\n    \n    \n      1\n      122.8\n      -29.945555555556\n      -51.143611111111\n      [AISW] SBCO-COM, Torre, CAMPO NOSSA SENHORA DE...\n    \n    \n      2\n      121.7\n      -29.945555555556\n      -51.143611111111\n      [AISW] SBCO-COM, Solo, CAMPO NOSSA SENHORA DE ...\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      502\n      1054.0\n      -22.796666666666667\n      -43.223888888888894\n      [DOC] SBGL-NAV, ILS 10 CAT II, Galeão - Antôni...\n    \n    \n      503\n      991\n      -22.796666666666667\n      -43.223888888888894\n      [DOC] SBGL-NAV, ILS 10 CAT II, Galeão - Antôni...\n    \n    \n      504\n      332.9\n      -22.804444444444446\n      -43.26416666666667\n      [DOC] SBGL-NAV, ILS/DME 28 ILM, Galeão - Antôn...\n    \n    \n      505\n      1076.0\n      -22.804444444444446\n      -43.26416666666667\n      [DOC] SBGL-NAV, ILS/DME 28 ILM, Galeão - Antôn...\n    \n    \n      506\n      1013\n      -22.804444444444446\n      -43.26416666666667\n      [DOC] SBGL-NAV, ILS/DME 28 ILM, Galeão - Antôn...\n    \n  \n\n507 rows × 4 columns"
  },
  {
    "objectID": "aisgeo.html",
    "href": "aisgeo.html",
    "title": "GEOAISWEB",
    "section": "",
    "text": "Dados para acesso à API GEOAISWEB\n\nsource\n\n\n\n convert_frequency (freq:float, unit:str)\n\nConverte a frequência freq para MHz\n\n\n\n\nType\nDetails\n\n\n\n\nfreq\nfloat\nFrequência Central da emissão\n\n\nunit\nstr\nUnidade da Frequência: [Hz, kHz, MHZ, GHZ]\n\n\nReturns\nfloat\nFrequência em MHz\n\n\n\n\nsource\n\n\n\n\n get_geodf (link:str, cols:List[str])\n\nFaz a requisição do link, processa o json e o retorna como Dataframe\n\n\n\n\nType\nDetails\n\n\n\n\nlink\nstr\nLink para a requisição das estações VOR do GEOAISWEB\n\n\ncols\nList\nSubconjunto de Colunas relevantes do DataFrame\n\n\nReturns\nDataFrame\n\n\n\n\n\nget_geodf(LINK_VOR, COLS_VOR)\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      0\n      116.8\n      -16.245367\n      -48.979089\n      [AISG] VOR - ANÁPOLIS CH 101X\n    \n    \n      1\n      117.0\n      -19.689048\n      -47.060575\n      [AISG] VOR - ARAXÁ\n    \n    \n      2\n      113.4\n      -9.868361\n      -56.104951\n      [AISG] VOR - ALTA FLORESTA CH 81X\nOPR INFRAERO\n    \n    \n      3\n      116.2\n      -22.951451\n      -46.569805\n      [AISG] VOR - BRAGANÇA CH 109X\n    \n    \n      4\n      114.3\n      -12.079940\n      -45.007135\n      [AISG] VOR - BARREIRAS CH 90X\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      74\n      112.1\n      -25.583203\n      -54.503514\n      [AISG] VOR - FOZ CH 58X\n    \n    \n      75\n      115.3\n      -31.390714\n      -54.109717\n      [AISG] VOR - BAGÉ U/S BTN RDL 275/305\n    \n    \n      76\n      116.9\n      -23.627464\n      -46.654635\n      [AISG] VOR - CONGONHAS CH 116X \\nVOR/DME NO AV...\n    \n    \n      77\n      115.9\n      -14.799000\n      -64.938333\n      [AISG] VOR - TRINIDAD-BL See Bolivia AIP\n    \n    \n      78\n      115.9\n      -25.244167\n      -57.522000\n      [AISG] VOR - ASUNCION VDVAS See Paraguay AIP\n    \n  \n\n79 rows × 4 columns\n\n\n\n\nget_geodf(LINK_NDB, COLS_NDB)\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      0\n      0.2650\n      -21.139333\n      -50.426667\n      [AISG] NDB - ARAÇATUBA OPR TAM\n    \n    \n      1\n      0.3000\n      -25.402667\n      -49.229000\n      [AISG] NDB - BACACHERI FM ARP, COVERAGE 50NM\n    \n    \n      2\n      0.3800\n      -22.314000\n      -49.107167\n      [AISG] NDB - BAURU COVERAGE 50NM\nOPR INFRAERO\n    \n    \n      3\n      0.2300\n      -7.266000\n      -35.892667\n      [AISG] NDB - CAMPINA GRANDE COVERAGE 60NM\nOPR ...\n    \n    \n      4\n      0.4200\n      -20.813167\n      -49.406167\n      [AISG] NDB - RIO PRETO OPR DAESP\n    \n    \n      5\n      0.4070\n      -4.194997\n      -69.939733\n      [AISG] NDB - LETÍCIA OPR COLÔMBIA\n    \n    \n      6\n      0.2500\n      -29.694722\n      -57.148056\n      [AISG] NDB - PASO DE LOS LIBRES OPR ARGENTINA\n    \n    \n      7\n      0.2950\n      -19.658900\n      -43.896933\n      [AISG] NDB - LAGOA SANTA COVERAGE 50NM\n    \n    \n      8\n      0.3750\n      -19.016219\n      -57.664456\n      [AISG] NDB - CORUMBÁ\n    \n    \n      9\n      0.2050\n      -5.386167\n      -35.531000\n      [AISG] NDB - MAXARANGUAPE\n    \n    \n      10\n      0.4100\n      -3.142825\n      -59.993747\n      [AISG] NDB - PELADA COVERAGE 70NM\n    \n    \n      11\n      0.3000\n      -17.217111\n      -46.933821\n      [AISG] NDB - PARACATU COVERAGE 65NM\n    \n    \n      12\n      0.2050\n      -1.486333\n      -56.397833\n      [AISG] NDB - TROMBETAS COVERAGE 100NM; OPR MIN...\n    \n    \n      13\n      0.4300\n      -23.045636\n      -45.516708\n      [AISG] NDB - TAUBATÉ COVERAGE 25NM; OPR COMAND...\n    \n    \n      14\n      0.3550\n      -4.886500\n      -65.349833\n      [AISG] NDB - URUCU OPR PETROBRAS\n    \n    \n      15\n      0.2850\n      -22.197333\n      -54.928333\n      [AISG] NDB - DOURA COVERAGE 70NM\n    \n    \n      16\n      0.2750\n      -22.787975\n      -45.215286\n      [AISG] NDB - GUARATINGUETÁ COVERAGE 50NM\n    \n    \n      17\n      0.3400\n      -22.168889\n      -49.069722\n      [AISG] NDB - AREALVA\n    \n    \n      18\n      0.1143\n      -32.340056\n      -54.223889\n      [AISG] NDB - MELO\n    \n    \n      19\n      0.2800\n      -28.678850\n      -49.066714\n      [AISG] NDB - JAGUARUNA COVERAGE 30NM. Other HR...\n    \n    \n      20\n      0.2850\n      -21.267053\n      -43.764111\n      [AISG] NDB - BARBACENA COVERAGE 60NM\n    \n    \n      21\n      0.3400\n      3.860144\n      -51.800131\n      [AISG] NDB - OIAPOQUE COVERAGE 70NM\n    \n    \n      22\n      0.2900\n      -17.724656\n      -48.610410\n      [AISG] NDB - CALDAS NOVAS OPR CALDAS NOVAS CIT...\n    \n    \n      23\n      0.4000\n      -10.784333\n      -65.281167\n      [AISG] NDB - GUAJARÁ-MIRIM\n    \n    \n      24\n      0.2000\n      -22.923333\n      -42.071500\n      [AISG] NDB - CABO FRIO OPR COSTA DO SOL OPERAD...\n    \n    \n      25\n      0.2400\n      2.219028\n      -55.941800\n      [AISG] NDB - TIRIÓS COVERANGE 50NM\n    \n    \n      26\n      0.4150\n      -22.194833\n      -49.929333\n      [AISG] NDB - MARÍLIA OPR PANTANAL LINHAS AÉREAS.\n    \n    \n      27\n      0.3200\n      -7.140500\n      -34.952500\n      [AISG] NDB - JOAO PESSOA Coverage 40NM\nOPR INF...\n    \n    \n      28\n      0.3850\n      -16.441667\n      -39.082500\n      [AISG] NDB - PORTO SEGURO COVERAGE 27 NM\n    \n    \n      29\n      0.2300\n      -4.249333\n      -69.936167\n      [AISG] NDB - TABATINGA COVERAGE 50NM\n    \n    \n      30\n      0.2750\n      -29.786014\n      -57.036586\n      [AISG] NDB - URUGUAIANA COVERAGE 100NM\n    \n    \n      31\n      0.2800\n      -28.279311\n      -54.171944\n      [AISG] NDB - SANTO ÂNGELO OPR RIO SUL.\n    \n    \n      32\n      0.2250\n      -25.408667\n      -54.621667\n      [AISG] NDB - ITAIPU\n    \n    \n      33\n      0.3400\n      -22.550075\n      -55.707161\n      [AISG] NDB - PONTA PORÃ OPR INFRAERO\n    \n    \n      34\n      0.2950\n      -3.256500\n      -52.250833\n      [AISG] NDB - ALTAMIRA OPR NAV Brasil\n    \n    \n      35\n      0.4100\n      -23.462189\n      -46.573404\n      [AISG] NDB - TUCA OPR NAV Brasil\n    \n    \n      36\n      0.3100\n      -16.703383\n      -43.819108\n      [AISG] NDB - MONTES CLAROS COVERAGE 50NM\nOPR N...\n    \n    \n      37\n      0.4150\n      -22.870108\n      -43.165119\n      [AISG] NDB - PAIOL OPR NAV Brasil\n    \n    \n      38\n      0.3300\n      -21.142667\n      -47.776000\n      [AISG] NDB - RIBEIRÃO COVERAGE 50NM\nOPR NAV Br...\n    \n    \n      39\n      0.2350\n      -19.765500\n      -47.959167\n      [AISG] NDB - UBERABA COVERAGE 50NM\nOPR NAV Brasil\n    \n    \n      40\n      0.2500\n      -4.240500\n      -56.004667\n      [AISG] NDB - ITAITUBA OPR NAV Brasil\n    \n    \n      41\n      1.6180\n      -19.463000\n      -42.479500\n      [AISG] NDB - IPATINGA OPR INFRAERO\n    \n    \n      42\n      0.3000\n      -29.996308\n      -50.145006\n      [AISG] NDB - TRAMANDAÍ OPR MAR\n    \n    \n      43\n      0.3300\n      -16.335333\n      -58.387167\n      [AISG] NDB - SAN MATIAS OPR BOLÍVIA\n    \n  \n\n\n\n\n\nget_geodf(LINK_DME, COLS_DME)\n\nC:\\Users\\rsilva\\AppData\\Local\\Temp\\2\\ipykernel_7420\\3107854738.py:9: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df[\"Channel\"] = df[cols[0]].astype(\"int\").astype(\"string\") + df[cols[1]]\nC:\\Users\\rsilva\\AppData\\Local\\Temp\\2\\ipykernel_7420\\3107854738.py:10: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  df[\"Frequency\"] = -1.0\n\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      0\n      1019.0\n      -22.812774\n      -42.095339\n      [AISG] DME - ALDEIA 58X\n    \n    \n      1\n      1202.0\n      -16.245367\n      -48.979089\n      [AISG] DME - ANÁPOLIS 115X\n    \n    \n      2\n      1204.0\n      -19.689048\n      -47.060575\n      [AISG] DME - ARAXÁ 117X\n    \n    \n      3\n      1168.0\n      -9.868361\n      -56.104951\n      [AISG] DME - ALTA FLORESTA 81X\n    \n    \n      4\n      1196.0\n      -22.951358\n      -46.569900\n      [AISG] DME - BRAGANÇA 109X\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      148\n      1175.0\n      -25.537761\n      -48.529855\n      [AISG] DME - PARANAGUÁ 88X\n    \n    \n      149\n      1181.0\n      -18.203235\n      -45.457072\n      [AISG] DME - TRÊS MARIAS 94X\n    \n    \n      150\n      1171.0\n      -27.621855\n      -48.632464\n      [AISG] DME - BIGUAÇU 84X\n    \n    \n      151\n      1186.0\n      -14.907781\n      -40.918839\n      [AISG] DME - VITÓRIA DA CONQUISTA 99X\n    \n    \n      152\n      1176.0\n      -19.442511\n      -44.231072\n      [AISG] DME - SETE LAGOAS 89X\n    \n  \n\n150 rows × 4 columns\n\n\n\n\nsource\n\n\n\n\n get_aisg ()\n\nLê e processa os dataframes individuais da API GEOAISWEB e retorna o conjunto concatenado"
  },
  {
    "objectID": "redemet.html",
    "href": "redemet.html",
    "title": "REDEMET",
    "section": "",
    "text": "Dados para acesso à API GEOAISWEB\n\nsource\n\n\n\n get_redemet ()\n\nFaz a requisição get à API do REDEMET usanda a chave apikey, processa o json e o retorna como Dataframe\n\nget_redemet()\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      0\n      2800\n      -16.201531\n      -40.674153\n      [RMET] Radar - Almenara/MG\n    \n    \n      1\n      2800\n      -1.406667\n      -48.461389\n      [RMET] Radar - Belém/PA\n    \n    \n      2\n      2800\n      2.844166667\n      -60.70027777778\n      [RMET] Radar - Boa Vista/RR\n    \n    \n      3\n      2800\n      -31.404\n      -52.701644\n      [RMET] Radar - Canguçu/RS\n    \n    \n      4\n      2800\n      -7.595833\n      -72.767778\n      [RMET] Radar - Cruzeiro do Sul/AC\n    \n    \n      5\n      2800\n      -15.97643\n      -48.016142\n      [RMET] Radar - Gama/DF\n    \n    \n      6\n      2800\n      -20.27855\n      -54.47396\n      [RMET] Radar - Jaraguari/MS\n    \n    \n      7\n      2800\n      -3.149216\n      -59.991881\n      [RMET] Radar - Manaus/AM\n    \n    \n      8\n      2800\n      -0.047222\n      -51.097778\n      [RMET] Radar - Macapá/AP\n    \n    \n      9\n      2800\n      -9.55129\n      -35.77068\n      [RMET] Radar - Maceió/AL\n    \n    \n      10\n      2800\n      -5.90448\n      -35.25401\n      [RMET] Radar - Natal/RN\n    \n    \n      11\n      2800\n      -22.464278\n      -43.297476\n      [RMET] Radar - Pico do Couto/RJ\n    \n    \n      12\n      2800\n      -9.367\n      -40.573\n      [RMET] Radar - Petrolina/PE\n    \n    \n      13\n      2800\n      -8.715\n      -63.893889\n      [RMET] Radar - Porto Velho/RO\n    \n    \n      14\n      2800\n      -16.00889\n      -44.69588\n      [RMET] Radar - São Francisco/MG\n    \n    \n      15\n      2800\n      -29.225213\n      -54.930257\n      [RMET] Radar - Santiago/RS\n    \n    \n      16\n      2800\n      -2.597222\n      -44.2375\n      [RMET] Radar - São Luis/MA\n    \n    \n      17\n      2800\n      -2.429722\n      -54.798889\n      [RMET] Radar - Santarém/PA\n    \n    \n      18\n      2800\n      -23.601915\n      -47.094063\n      [RMET] Radar - São Roque/SP\n    \n    \n      19\n      2800\n      -12.9025\n      -38.32666\n      [RMET] Radar - Salvador/BA\n    \n    \n      20\n      2800\n      -19.98887\n      -40.5794\n      [RMET] Radar - Santa Teresa/MG\n    \n    \n      21\n      2800\n      -3.377222\n      -64.720556\n      [RMET] Radar - Tefé/AM\n    \n    \n      22\n      2800\n      -18.207259\n      -45.460535\n      [RMET] Radar - Três Marias/MG\n    \n    \n      23\n      2800\n      -4.248333\n      69.935\n      [RMET] Radar - Tabatinga/AM\n    \n    \n      24\n      2800\n      -0.143611\n      -67.056944\n      [RMET] Radar - São Gabriel da Cachoeira/AM\n    \n    \n      25\n      2800\n      -28.128373\n      -49.471816\n      [RMET] Radar - Morro da Igreja/SC"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RFDataHub",
    "section": "",
    "text": "A presente biblioteca tem como intuito agregar dados de estações transmissoras de Radiofrequência"
  },
  {
    "objectID": "index.html#bases-de-dados",
    "href": "index.html#bases-de-dados",
    "title": "RFDataHub",
    "section": "BASES DE DADOS",
    "text": "BASES DE DADOS\n\nA Seguir são descritas as instâncias de banco, as bases de dados e as tabelas consultadas.\n\n\nInstância de Banco de Dados SQL - Server - ANATELBDRO05:\n\nBase de Dados: SITARWEB:\n\nSTEL - Serviços Privados de Telecomunicações\nBase legada cujos registros, novos e antigos, estão sendo transferidos para o banco de dados licenciamento da instância ANATELBDRO06\n\nBase de Dados: SRD:\n\nRADCOM - Serviço de Radiodifusão Comunitária\n\n\nInstância de Banco de Dados MongoDB - ANATELBDRO06:\n\nBase de Dados: sms\n\nColeção: srd:\n\nSRD - Demais serviços de Radiodifusão, e.g. TV, RTV, RTVD, FM, AM, etc.\n\nColeção: licenciamento:\n\nTELECOM - Serviços Privados de Telecomunicações, e.g. Limitado Privado.\nSMP - Serviço Móvel Pessoal, e.g. 4G e 5G\n\n\n\n\nA base de dados sms, e no geral a instância como um todo, é referida como MOSAICO por conta da plataforma web no qual são servidos esses dados para acesso.\n\nAERONAUTICA - Consolidação de diversas bases de dados públicas da aeronáutica. Esses dados são enriquecidos com informações adicionais fornecidas por órgãos como o DECEA, além de emissões conhecidas provenientes de conhecimento técnico prévio consolidado na agência."
  },
  {
    "objectID": "index.html#radcom",
    "href": "index.html#radcom",
    "title": "RFDataHub",
    "section": "RADCOM",
    "text": "RADCOM\n\n\nCode\npasta = Path.cwd().parent / 'dados'\ndf = pd.read_parquet(pasta / 'radcom.parquet.gzip')\ndf.sample(5).iloc[:, :6]\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n    \n  \n  \n    \n      3168\n      104.9\n      ASSOCIACAO COMUNITARIA JOAIMENSE CULTURAL DE R...\n      50012640301\n      682812145\n      Joaíma\n      3136009\n    \n    \n      3345\n      104.9\n      ASSOCIACAO DE AMIGOS VALE DO GUAPORE\n      50013713175\n      683836722\n      Pontes e Lacerda\n      5106752\n    \n    \n      4433\n      105.9\n      ASSOCIACAO COMUNITARIA DE APOIO A CIDADANIA-ACAC\n      50013423096\n      683549529\n      Guarará\n      3128501\n    \n    \n      3169\n      104.9\n      ASSOCIAÇÃO COMUNITÁRIA EDUCATIVA DE JURAMENTO ...\n      50409156329\n      699282721\n      Juramento\n      3136801\n    \n    \n      457\n      87.9\n      ASSOCIAÇÃO COMUNITÁRIA E DE COMUNICAÇÃO SOCIAL...\n      50409272230\n      697612040\n      Salitre\n      2311959\n    \n  \n\n\n\n\n\nFiltragem ✂️\nOs únicos filtros efetuados na query para os dados de RADCOM são:\n<...>\nwhere\n    SRD.IdtPlanoBasico is not Null \n    and SRD.IndFase is not Null\n<...>\nEsse filtro significa que a emissão está licenciada devidamente com o processo de outorga já concluído ou com funcionamento autorizado.\n\n\nCode\nprint(f'A base RADCOM possui atualmente {len(df)} registros ativos.')\n\n\nA base RADCOM possui atualmente 4996 registros ativos.\n\n\n\n\nDescrição 📊\nA seguir são descritas as colunas extraídas da base e o significado de cada uma\n\nFrequência: Frequência de Transmissão da Estação\nEntidade: Nome da Pessoa (Física | Jurídica) detentora da Outorga\nFistel: Código itentificador da Outorga de Serviço, um Fistel pode conter uma ou mais estações\nNúmero_Estação: Código Identificador da Estação - Código não necessáriamente único, por vezes uma única estação possui diversos transmissores com características distintas\nMunicípio: Município de Outorga daquela estação\nCódigo_Município: Código único do IBGE identificando univocamente o município, esse código é utilizado para validar a localização das coordenadas da estação\nUF: Unidade Federativa ( Estado )\nLatitude: Latitude em formato Decimal\nLongitude: Longitude em formato Decimal\nFase: Fase do Processo de Licenciamento\nSituação: Situação da Outorga\n\n\n\nPós-Processamento 🛠️\nA seguir são descritas as colunas adicionadas à base extraída e o significado de cada uma\n\nAs colunas Fase e Situação somente existem na base RADCOM, para normalizar esses dados e combinar com as demais bases, essas duas colunas são transformadas em uma única coluna chamada Classe, essa coluna tem o intuito em todas as tabelas de identificar o tipo de estação transmissora:\n\n\nOnde a informação de Situação é ausente, a Classe é igual a Fase, exemplos:\n\n3\nP\n\nOnde ambas estão presentes a Classe é igual a <Fase>-<Situação>:\n\n3-P\nP-A\n\nNum_Serviço: Número identificador do serviço, no caso de RADCOM o valor é único: 231\nClasse_Emissão: Dado ausente na base de RADCOM , inserido valores únicos nulos para normalizar com as demais bases\nLargura_Emissão(kHz): Largura de Banda da Emissão em kHz. Nessa coluna é imputado o valor de 256, valor padrão para o serviço FM.\nValidade_RF: Dado ausente na base de RADCOM , inserido valores únicos nulos para normalizar com as demais bases\nStatus: Dado ausente na base de RADCOM , inserido valor único RADCOM para normalizar com demais bases\nFonte: Fonte dos dados, nessa caso é inserido o nome da Tabela: SRD\nMultiplicidade: Contagem do Registro. Nesse caso o valor é somente 1 por conta de todos os registros serem únicos, i.e. são referentes a uma estação única\n\n\n\nDados Incorretos 🗑️\nA seguir são exibidas informações sobre coordenadas ausentes ou facilmente identificadas como incorretas, nesse caso fora dos limites do Brasil. > Uma validação precisa das coordenadas é feita antes de consolidar o arquivo final e será descrita posteriormente\n\n\nCode\nprint(f'Número de coordenadas ausentes: {df[df.Latitude.isna() | df.Longitude.isna()].shape[0]}')\n\n\nNúmero de coordenadas ausentes: 0\n\n\n\n\nCode\ndf[['Latitude', 'Longitude']] = df[['Latitude', 'Longitude']].astype('float')\nbad = df[~(df.Latitude.between(MIN_LAT, MAX_LAT) & df.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(\"Exemplo de coordenadas incorretas, fora dos limites do Brasil: \")\nbad.loc[:, ['Frequência', 'Entidade', 'Número_Estação', 'Município', 'Latitude', 'Longitude']]\n\n\nExemplo de coordenadas incorretas, fora dos limites do Brasil: \n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Número_Estação\n      Município\n      Latitude\n      Longitude\n    \n  \n  \n    \n      64\n      87.5\n      ASSOCIAÇÃO SERRANA COMUNITÁRIA - ASERCOM\n      691861544\n      São Francisco de Paula\n      -50.572500\n      -29.446389\n    \n    \n      327\n      87.9\n      Associação de Radiodifusão Comunitária de Ipec...\n      1010974570\n      Ipecaetá\n      -0.205286\n      -0.655050\n    \n    \n      470\n      87.9\n      ASSOCIAÇÃO COMUNITÁRIA E CULTURAL DE BOA ESPER...\n      695516850\n      Boa Esperança\n      -36.535556\n      -79.833889\n    \n    \n      482\n      87.9\n      Associação Rural Jaguarense\n      1015029458\n      Jaguaré\n      -0.313650\n      -0.669211\n    \n    \n      638\n      87.9\n      ASSOCIAÇÃO COMUNITÁRIA DE SÃO LUIZ DO NORTE\n      695284665\n      São Luiz do Norte\n      -36.042222\n      -68.627222\n    \n    \n      736\n      87.9\n      ASSOCIAÇÃO COMUNITÁRIA VOZ DE SÃO PEDRO DOS CR...\n      691975078\n      São Pedro dos Crentes\n      -3.501111\n      -0.773333\n    \n    \n      1072\n      87.9\n      ASSOCIAÇÃO DOS AMIGOS DA CULTURA\n      691081085\n      Poços de Caldas\n      -45.838889\n      -21.923611\n    \n    \n      1267\n      87.9\n      ASSOCIAÇÃO COMUNITÁRIA IPIRANGUENSE\n      1014626029\n      Ipiranga do Norte\n      -0.203989\n      -0.935672\n    \n    \n      1330\n      87.9\n      FUNDAÇÃO DE ASSISTÊNCIA À FAMÍLIA ANTÔNIO CORR...\n      695446541\n      Irituia\n      -1.771389\n      -4.437222\n    \n    \n      1406\n      87.9\n      CENTRO INTEGRADO DE AÇÕES COMUNITÁRIAS PELA VIDA\n      1015253617\n      João Pessoa\n      -0.119872\n      -0.580836\n    \n    \n      1703\n      87.9\n      Associação Comunitária de Tamoios\n      1014984820\n      Cabo Frio\n      -0.376531\n      -0.700028\n    \n    \n      2103\n      87.9\n      ASSOCIAÇÃO DE MÍDIA COMUNITÁRIA DA CIDADE DE N...\n      1009018300\n      Nhandeara\n      -20.694167\n      -5.041111\n    \n    \n      2384\n      98.5\n      ASSOCIAÇÃO DE RÁDIO E CULTURA\n      691860033\n      Serra\n      -52.223611\n      -40.211389\n    \n    \n      2441\n      98.7\n      INSTITUTO DE RADIODIFUSÃO E DESENVOLVIMENTO CO...\n      1014997094\n      Sobral\n      -0.067903\n      -0.665706\n    \n    \n      2442\n      98.7\n      Centro Cultural de Comunicação de Jaibaras - CCCJ\n      1014529902\n      Sobral\n      -0.062869\n      -0.674886\n    \n    \n      2619\n      104.9\n      ASSOCIAÇÃO SEMEANDO PARA O FUTURO\n      1014898444\n      Belmonte\n      -0.264261\n      -0.647931\n    \n    \n      2934\n      104.9\n      ASSOCIAÇÃO DE RADIODIFUSÃO COMUNITÁRIA DE NENE...\n      1015020108\n      Quixeramobim\n      5.441389\n      -39.197500\n    \n    \n      3145\n      104.9\n      ASSOCIAÇÃO COMUNITÁRIA AMIGOS DE GUIDOVAL\n      1015168172\n      Guidoval\n      -0.352519\n      -0.713217\n    \n    \n      3329\n      104.9\n      ASSOCIAÇÃO COMUNITÁRIA E CULTURAL DE CONQUISTA...\n      699394678\n      Conquista D'Oeste\n      -14.537222\n      -29.546944\n    \n    \n      3421\n      104.9\n      ASSOCIAÇÃO DE RADIODIFUSÃO COMUNITÁRIA CAMPOS ...\n      1014527870\n      Tracuateua\n      -0.017892\n      -0.781681\n    \n    \n      4785\n      105.9\n      ASSOCIAÇÃO DE DESENVOLVIMENTO CULTURAL, ARTÍST...\n      692127186\n      Suzanápolis\n      -20.500833\n      -1.024444\n    \n    \n      4878\n      106.3\n      Associação Comunitária de Desenvolvimento Artí...\n      1014529481\n      Campo Grande\n      -0.340136\n      -0.909458"
  },
  {
    "objectID": "index.html#stel",
    "href": "index.html#stel",
    "title": "RFDataHub",
    "section": "STEL",
    "text": "STEL\n\n\nCode\ndf = pd.read_parquet(pasta / 'stel.parquet.gzip')\ndf[['Latitude', 'Longitude']] = df[['Latitude', 'Longitude']].astype('float')\ndf.sample(5).iloc[:, :6]\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n    \n  \n  \n    \n      16415\n      156.675\n      PETROLEO BRASILEIRO S A PETROBRAS\n      50411168908\n      1008756757\n      Santos\n      3548500\n    \n    \n      25728\n      945.0\n      UNIVERSIDADE FEDERAL DO PARA\n      50416059716\n      1006864110\n      Acará\n      1500206\n    \n    \n      21282\n      450.4875\n      RADIO DIFUSORA COLMEIA DE PORTO UNIAO LTDA ME\n      14020348812\n      1002823339\n      União da Vitória\n      4128203\n    \n    \n      7963\n      156.5\n      HDG SERVICOS AMBIENTAIS LTDA\n      50405428871\n      1008115409\n      São Francisco do Conde\n      2929206\n    \n    \n      24272\n      902.6\n      UNIVERSIDADE FEDERAL DO PARA\n      50412323184\n      1001729843\n      Belém\n      1501402\n    \n  \n\n\n\n\n\nFiltragem ✂️\n\nA base do STEL de estações outorgadas ativas originalmente era muito grande, comportando milhões de registros, gradualmente os registros ativos e novos registros foram migrados para a base licenciamento do MOSAICO\n\nA seguir são descritos os filtros realizados na query do STEL:\n  <...>\nwhere\n  HABILITACAO.NumServico <> '010' #1 \n  and ESTACAO.DataExclusao is null #2\n  and ESTACAO.IndStatusEstacao = 'L' #3\n  and Municipio.CodMunicipio is not null #4\n  and frequencia.MedTransmissaoInicial is not null #5 \n  and frequencia.CodStatusRegistro = 'L' #6\n  and contrato.DataValidadeRadiofrequencia is not null #7\nExplicando a query acima linha a linha:\n\nExcluir estações do Serviço Móvel Pessoal (SMP - 010)\nIncluir somente estações com Data de Exclusão nula, i.e. estações ativas\nIncluir somente estações com estado L (LICENCIADO)\nExcluir estações com o código do município ausente (Necessário para validar a localização)\nExcluir estações sem a frequência de transmissão atribuída\nExcluir estações cuja frequência atribuída esteja distinta do estado L ( LICENCIADO )\nExcluir estações cuja Validade de Radiofrequência esteja nula\n\n\n\nCode\nprint(f'A base STEL possui atualmente {len(df)} registros ativos pelos filtros descritos.')\n\n\nA base STEL possui atualmente 35417 registros ativos pelos filtros descritos.\n\n\n\n\nDescrição 📊\nAbaixo são descritas as colunas que não foram descritas anteriormente na base de RADCOM\n\nClasse: String que identifica o tipo de estação , e.g Fixa Aeronáutica, Fixa Base, Móvel, Transmissora etc…\nNum_Serviço: Código que identifica o Serviço Outorgado na Anatel, aqui existem diversos serviços: 604, 035, 507, 019\nValidade_RF: Data de Validade da Radiofrequência\n\nAs demais colunas foram descritas anteriormente para a base RADCOM\n\n\nPós-Processamento 🛠️\n\nNas tabelas do banco de dados do STEL, na modelagem de banco as informações de Classe_Emissão e Largura_Emissão foram codificadas numa única string chamada Designação de Emissão, é efetuado o processamento dessa string para resgatar as informações individuais em 2 colunas:\n\n\nClasse_Emissão: Código que identifica as característica da emissão daquela estação\nLargura_Emissão(kHz): Largura de Emissão em kHz\nA coluna Validade_RF é filtrada para constar somente a data, ela aparece no formato datetime nas tabelas do banco, no entanto com informação de hora nula\nA Frequência é normalizada para a unidade MHz\nStatus: Essa coluna é criada para normalizar as colunas das bases do MOSAICO. É inserido um valor único L\nFonte: Fonte dos dados, nessa caso é inserido o nome do Banco STEL\nMultiplicidade: Contagem do Registro. Nesse caso o valor é somente 1 por conta de todos os registros serem únicos, i.e. são referentes a uma estação única\n\n\n\nDados Incorretos 🗑️\nA seguir são exibidas informações sobre coordenadas ausentes ou facilmente identificadas como incorretas, nesse caso fora dos limites do Brasil.\n\nUma validação precisa das coordenadas é feita antes de consolidar o arquivo final e será descrita posteriormente\n\n\n\nCode\nprint(f'Número de coordenadas ausentes: {df[df.Latitude.isna() | df.Longitude.isna()].shape[0]}')\n\n\nNúmero de coordenadas ausentes: 0\n\n\n\n\nCode\ndf[['Latitude', 'Longitude']] = df[['Latitude', 'Longitude']].astype('float')\nbad = df[~(df.Latitude.between(MIN_LAT, MAX_LAT) & df.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(\"Exemplo de coordenadas incorretas, fora dos limites do Brasil: \")\nbad.loc[:, ['Frequência', 'Entidade', 'Número_Estação', 'Município', 'Latitude', 'Longitude']]\n\n\nExemplo de coordenadas incorretas, fora dos limites do Brasil: \n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Número_Estação\n      Município\n      Latitude\n      Longitude\n    \n  \n  \n    \n      1985\n      131.875\n      AZUL LINHAS AEREAS BRASILEIRAS S.A\n      1009302628\n      Porto Seguro\n      -16.440833\n      -30.081389\n    \n    \n      2874\n      153.57\n      RADIO SAO CARLOS LTDA.ME\n      3570061\n      São Carlos\n      -21.033333\n      -27.966667\n    \n    \n      2966\n      153.57\n      RADIO SAO CARLOS LTDA.ME\n      3570070\n      São Carlos\n      -22.033333\n      -27.966667\n    \n    \n      9239\n      156.525\n      LOC PILOT PRATICAGEM - EIRELI\n      1008355728\n      São Sebastião\n      -45.467519\n      -23.817844\n    \n    \n      9956\n      156.525\n      LOC PILOT PRATICAGEM - EIRELI\n      1008355710\n      Santos\n      -46.297125\n      -23.986986\n    \n    \n      10487\n      156.525\n      LOC PILOT PRATICAGEM - EIRELI\n      1008355728\n      São Sebastião\n      -45.467519\n      -23.817844\n    \n    \n      12559\n      156.5\n      AMBIPAR RESPONSE S/A\n      1010754715\n      Guamaré\n      -36.390586\n      -5.148578\n    \n    \n      13924\n      156.65\n      AMBIPAR RESPONSE S/A\n      1010754715\n      Guamaré\n      -36.390586\n      -5.148578\n    \n    \n      14702\n      156.525\n      LOC PILOT PRATICAGEM - EIRELI\n      1008355710\n      Santos\n      -46.297125\n      -23.986986\n    \n    \n      18343\n      156.8\n      AMBIPAR RESPONSE S/A\n      1010754715\n      Guamaré\n      -36.390586\n      -5.148578\n    \n    \n      30239\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898102\n      Porto Velho\n      9.269350\n      -64.642775\n    \n    \n      30247\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898080\n      Porto Velho\n      9.270789\n      -64.640611\n    \n    \n      30248\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898161\n      Porto Velho\n      9.245614\n      -64.646772\n    \n    \n      30249\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898188\n      Porto Velho\n      9.247097\n      -64.646789\n    \n    \n      31146\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898161\n      Porto Velho\n      9.245614\n      -64.646772\n    \n    \n      31147\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898188\n      Porto Velho\n      9.247097\n      -64.646789\n    \n    \n      31158\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898102\n      Porto Velho\n      9.269350\n      -64.642775\n    \n    \n      31655\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898080\n      Porto Velho\n      9.270789\n      -64.640611\n    \n    \n      31663\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898137\n      Porto Velho\n      9.248617\n      -64.646650\n    \n    \n      34111\n      950.125\n      RADIO TERRA NOVA FM LTDA\n      1005552212\n      Terra Nova\n      -38.618911\n      -12.405617\n    \n    \n      35367\n      25.375\n      ENERGIA SUSTENTAVEL DO BRASIL S.A.\n      699898137\n      Porto Velho\n      9.248617\n      -64.646650"
  },
  {
    "objectID": "index.html#mosaico---radiodifusão",
    "href": "index.html#mosaico---radiodifusão",
    "title": "RFDataHub",
    "section": "MOSAICO - Radiodifusão",
    "text": "MOSAICO - Radiodifusão\n\n\nCode\ndf = pd.read_parquet(pasta / 'srd.parquet.gzip')\ndf[['Latitude', 'Longitude']] = df[['Latitude', 'Longitude']].astype('float')\ndf.sample(5).iloc[:, :6]\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n    \n  \n  \n    \n      6157\n      85.0\n      PREFEITURA MUNICIPAL DE SEARA\n      50400688832\n      323090346\n      Seara\n      4217501\n    \n    \n      23822\n      593.0\n      SOCIEDADE RADIO E TELEVISAO ALTEROSA S. A.\n      50441109144\n      1013206573\n      Pitangui\n      3151404\n    \n    \n      1588\n      85.0\n      PREFEITURA MUNICIPAL DE NOVA VENECIA\n      50400133296\n      5591031\n      Nova Venécia\n      3203908\n    \n    \n      16758\n      97.3\n      VALE COMUNICAÇÕES LTDA\n      50401377539\n      688751997\n      Diamantino\n      5103502\n    \n    \n      8657\n      479.0\n      RADIO E TELEVISAO BANDEIRANTES LTDA\n      50416827802\n      1007852310\n      Águas de Lindóia\n      3500501\n    \n  \n\n\n\n\n\nFiltragem ✂️\nOs filtros efetuados diretamente no banco MongoDB do Mosaico são simples, a query completa ocupa somente 3 linhas:\n{\n\"frequency\": {\"$nin\": [None, \"\", 0], \"$type\": 1.0},\n\"srd_planobasico.CodMunicipio\": {\"$nin\": [None, \"\"]},\n\"NumFistel\": {\"$nin\": [None, \"\"]},\n}\n\nExcluir frequências nulas ou zeradas, e excluir registros não numéricos (\"$type\": 1.0 )\nExcluir registros com código de município ausente ou inválido ( Necessário para validar as coordenadas)\nExcluir registros com número do Fistel Nulo ou Inválido\n\n\n\nDescrição 📊\n\n🤌 Não existem informações no MOSAICO de Classe_Emissão e tampouco Largura_de_Emissão para o serviço de Radiodifusão, assim essas colunas são preenchidas com valores nulos\n\nAdicionalmente são extraídas as seguintes colunas com informações técnicas das estações:\n\nPotência(W)\nCod_TipoAntena\nPolarização\nRaio_Antena\nGanho_Antena\nFrente_Costa_Antena\nAngulo_Meia_Potencia_Antena\nÂngulo_Elevação\nAzimute\nAltura_Antena\nPerdas_Acessorias\n\n\n\nPós-Processamento 🛠️\n\nSão mantidas somente estações nos estados autorizados a operar: C1, C2, C3, C4, C7, C98\nNormalizada as frequências para a unidade MHz\nImputados os valores para Largura_de_Emissão(kHz), e.g. 256kHz para o canal estéreo de FM, 6MHz para TV Digital etc.\n\nApesar de não constar esses dados na base, os valores de referência são conhecidos pela natureza do Serviço.\n\n\n\n\nCode\nprint(f'A base do MOSAICO de Radiodifusão possui atualmente {len(df)} registros ativos pelos filtros descritos.')\n\n\nA base do MOSAICO de Radiodifusão possui atualmente 31012 registros ativos pelos filtros descritos.\n\n\n\n\nDados Incorretos 🗑️\n\n☝🏽 Os dados do MOSAICO de Radiodifusão são bastante incompletos em relação às coordenadas, praticamente metade dos registros após a filtragem e pós-processamento não possuem latitude e/ou longitude. No entanto esses dados não são excluídos deliberadamente porque nesses registros serão imputados as coordenadas centrais do município no qual se encontram na etapa de validação de coordenadas.\n\n\n\nCode\ndf[['Latitude', 'Longitude']] = df[['Latitude', 'Longitude']].astype('float')\nbad = df[~(df.Latitude.between(MIN_LAT, MAX_LAT) & df.Longitude.between(MIN_LONG, MAX_LONG))]\nprint(\"Exemplo de coordenadas incorretas ou ausentes: \")\nbad.loc[:, ['Frequência', 'Entidade', 'Número_Estação', 'Município', 'Latitude', 'Longitude']]\n\n\nExemplo de coordenadas incorretas ou ausentes: \n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Número_Estação\n      Município\n      Latitude\n      Longitude\n    \n  \n  \n    \n      0\n      207.0\n      REDE DE COMUNICACOES ACREANA LTDA\n      <NA>\n      Cruzeiro do Sul\n      NaN\n      NaN\n    \n    \n      1\n      539.0\n      X-MEDIAGROUP S.A.\n      <NA>\n      Mâncio Lima\n      NaN\n      NaN\n    \n    \n      16\n      593.0\n      FUNDACAO EDUCACIONAL E CULTURAL DAS AGUAS QUENTES\n      <NA>\n      Caldas Novas\n      NaN\n      NaN\n    \n    \n      17\n      665.0\n      GUARANI RADIODIFUSAO LTDA\n      <NA>\n      Caldas Novas\n      NaN\n      NaN\n    \n    \n      24\n      551.0\n      OCAN COMUNICACAO DIGITAL SE LTDA\n      1004428283\n      Santa Quitéria do Maranhão\n      NaN\n      NaN\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      31005\n      581.0\n      PREFEITURA MUNICIPAL DE APIUNA\n      <NA>\n      Apiúna\n      NaN\n      NaN\n    \n    \n      31006\n      593.0\n      PREFEITURA MUNICIPAL DE ALVINOPOLIS\n      <NA>\n      Alvinópolis\n      NaN\n      NaN\n    \n    \n      31007\n      635.0\n      PREFEITURA MUNICIPAL DE SAO TIAGO\n      <NA>\n      São Tiago\n      NaN\n      NaN\n    \n    \n      31008\n      503.0\n      PREFEITURA MUNICIPAL DE SAO TIAGO\n      <NA>\n      São Tiago\n      NaN\n      NaN\n    \n    \n      31009\n      491.0\n      PREFEITURA MUNICIPAL DE CAMPOS ALTOS\n      <NA>\n      Campos Altos\n      NaN\n      NaN\n    \n  \n\n16005 rows × 6 columns"
  },
  {
    "objectID": "index.html#mosaico---telecomunicações",
    "href": "index.html#mosaico---telecomunicações",
    "title": "RFDataHub",
    "section": "MOSAICO - Telecomunicações",
    "text": "MOSAICO - Telecomunicações\n\n\nCode\ndf = pd.read_parquet(pasta / 'telecom.parquet.gzip')\ndf[['Latitude', 'Longitude']] = df[['Latitude', 'Longitude']].astype('float')\ndf.sample(5).iloc[:, :6]\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n    \n  \n  \n    \n      467215\n      148.71\n      TECON RIO GRANDE S/A\n      50001197975\n      1014986777\n      Rio Grande\n      4315602\n    \n    \n      561127\n      245.225\n      OI S.A. - EM RECUPERAÇÃO JUDICIAL\n      06030093525\n      691968292\n      <NA>\n      2914307\n    \n    \n      147545\n      165.99375\n      COMPANHIA ESTADUAL DE DISTRIBUICAO DE ENERGIA ...\n      50405704062\n      1003279950\n      \n      4317301\n    \n    \n      492247\n      14.76\n      CLARO S.A.\n      50013414186\n      692458719\n      Jaboatão dos Guararapes\n      2607901\n    \n    \n      146266\n      383.65\n      CSP - COMPANHIA SIDERURGICA DO PECEM\n      50413236749\n      1003176000\n      \n      2312403\n    \n  \n\n\n\n\n\nFiltragem ✂️\nA query do MongoDB para a base LICENCIAMENTO é listada e descrita a seguir\n{\"DataExclusao\": None},\n{\"DataValidade\": {\"$nin\": [\"\", None]}},\n{\"Status.state\": \"LIC-LIC-01\"},\n{\"NumServico\": {\"$nin\": [\"010\", \"045\", \"171\", \"450\", \"750\", \"\", None]}},\n{\"FreqTxMHz\": {\"$nin\": [None, \"\", 0]}},\n{\"CodMunicipio\": {\"$nin\": [None, \"\"]}},\n{\"FreqTxMHz\": {\"$type\": 1.0}},\n{\"Latitude\": {\"$type\": 1.0}},\n{\"Longitude\": {\"$type\": 1.0}}\n\nRegistros cuja data de exclusão é Nula, i.e. registros ativos\nData de Validade de Radiofrequência não nula ou vazia\nEstado Licenciado\nExcluir serviços que não são de Radiodfusão ou não são relevantes pelos Planos de Monitoração atualmente, por exemplo 010 - SMP é extraído separadamente.\nFrequência de Transmissão não nula, zerada ou vazia\nCódigo de Município não nulo ou vazio\nFrequência de Transmissão no formato numérico (eliminar registros com caracteres e texto)\nLatitude no formato numérico\nLongitude no formato numérico\n\n\n\nDescrição 📊\n\nA base do MOSAICO - licenciamento, da qual as tabelas de Telecomunicações e Serviço Móvel Pessoal são extraídas, é de longe a maior atualmente com milhões de registros ativos. As colunas extraídas para os serviços de telecomunicações são as mesmas descritas anteriormente no MOSAICO - Radiodifusão.\n\n\n\nPós-Processamento 🛠️\n\nO pós-processamento do MOSAICO - LICENCIAMENTO é mais complexo por conta das escolhas na modelagem do Banco e faz uso extenso de funções da biblioteca pandas\n\n\nA string DesignacaoEmissão é a concatenação das colunas Largura_Emissão e Classe_Emissão como constavam no STEL. Além do mais existem estações com múltiplas strings de Emissão na mesma coluna separadas por vírgula, os passos de processamento dessa colunas são os seguintes:\n\nEliminação de espaços e normalização para maiúscula\nExpansão dos múltiplos registros separados por vírgula em linhas individuais, 1 por linha com as demais informações idênticas\nProcessamento de cada string Emissão concatenada nas duas partes atômicas: Largura_Emissão e Classe_Emissão\n\nMultiplicidade: Contador do número de estações similares:\n\nExistem registros com todas as características anteriores idênticas, exceto o Número_Estação por exemplo.\nEstações possuem detalhes técnicos que não são considerados relevantes, pelo menos no escopo atual, para a Análise Espectral e Identificação de Emissões - como por exemplo:\n\nTipo de Antena\nPolarização: Horizontal ou Vertical.\nAltura da Antena\nPotência de Transmissão\n\n\nA seguir é mostrado um exemplo de estação desse tipo, com 201 estações com características técnicas idênticas conforme o quesito descrito no parágrafo anterior: \n\nEsses registros são considerados idênticos e são agrupados. É utilizado o primeiro número de estação que aparece na base como referência e o total de estações “idênticas” é registrado na coluna multiplicidade: 1 para estações “únicas” e qualquer valor maior que 1 descreve o número de estações similares agrupadas, como as 201 no exemplo anterior \n\n\nAtualmente esse agrupamento de estações similares em um único registro reduz o número de registro para certa de 10% do original, em outras palavras, no pós-processamento são agregadas cerca de 90% das estações.\n\n\nCode\nprint(f'A base do MOSAICO de Telecomunicações possui atualmente {len(df)} registros ativos pelos filtros descritos.')\n\n\nA base do MOSAICO de Telecomunicações possui atualmente 757142 registros ativos pelos filtros descritos."
  },
  {
    "objectID": "index.html#mosaico---serviço-móvel-pessoal",
    "href": "index.html#mosaico---serviço-móvel-pessoal",
    "title": "RFDataHub",
    "section": "MOSAICO - Serviço Móvel Pessoal",
    "text": "MOSAICO - Serviço Móvel Pessoal\n\nComo o serviço de telefonia e banda larga móvel é um serviço de extrema importância e aspecto distinto, com diferentes necessidades de pós-processamento. Esse serviço é extraído num fluxo específico.\n\n\n\nCode\ndf = pd.read_parquet(pasta / 'smp_formated.parquet.gzip')\ndf2 = pd.read_parquet(pasta / 'smp_processado.parquet.gzip')\ndf[['Latitude', 'Longitude']] = df[['Latitude', 'Longitude']].astype('float')\ndf.sample(5).iloc[:, :6]\n\n\n\n\n\n\n  \n    \n      \n      NumAto\n      DataValidade\n      NumFistel\n      NomeEntidade\n      NumEstacao\n      Latitude\n    \n  \n  \n    \n      1853288\n      110062022.0\n      2023-04-20\n      50409146285\n      TELEFONICA BRASIL S.A.\n      1010971724\n      NaN\n    \n    \n      1926821\n      29272013\n      2023-04-30\n      50409314250\n      TIM S A\n      1015051127\n      NaN\n    \n    \n      1105173\n      125002022\n      2028-11-29\n      50409314250\n      TIM S A\n      688394825\n      NaN\n    \n    \n      616063\n      155832022\n      2028-11-29\n      50409146366\n      TELEFONICA BRASIL S.A.\n      1000130875\n      NaN\n    \n    \n      892766\n      46622011\n      2028-03-31\n      50409105090\n      CLARO S.A.\n      641099355\n      NaN\n    \n  \n\n\n\n\n\nFiltragem ✂️\n\nA query para o serviço SMP, assim como o restante das bases do MOSAICO é a mais simples possível, uma vez que filtros e pós-processamento mais sofisticados são feitos diretamente no python utilizando o todo poderoso pandas 🐼\n\nMONGO_SMP = {\n    \"$and\": [\n        {\"DataValidade\": {\"$nin\": [\"\", None]}},\n        {\"Status.state\": \"LIC-LIC-01\"},\n        {\"NumServico\": \"010\"},\n        {\"FreqTxMHz\": {\"$nin\": [None, \"\", 0]}},\n        {\"CodMunicipio\": {\"$nin\": [None, \"\"]}},\n        {\"FreqTxMHz\": {\"$type\": 1.0}},\n    ]\n}\n\nRegistros cuja data de exclusão é Nula, i.e. registros ativos\nEstado Licenciado\nExtração de estações do serviço SMP - 010\nFrequência de Transmissão não nula, zerada ou vazia\nCódigo de Município não nulo ou vazio\nFrequência de Transmissão no formato numérico (eliminar registros com caracteres e texto)\n\n\n\nDescrição 📊\n\nAs colunas extraídas são as mesmas já descritas anteriormente para as bases de Radiodifusão e Licenciamento.\n\n\n\nPós-Processamento 🛠️\n\nO pós-processamento do MOSAICO - Serviço Móvel Pessoal envolve mais passos além do que já foi descrito para o MOSAICO - Licenciamento. As informações cadastradas são de responsabilidade das entidades, e portanto não há garantia de corretude das informações prestadas. Diversos problemas são encontrados, como dados ausentes e incorretos.\n\n\nA string DesignacaoEmissão é processada da mesma forma descrita no parágrafo anterior para a base MOSAICO - Licenciamento, dela é derivada a coluna Classe_Emissão e Largura_Emissão(kHz)\nOs registros que possuem a Frequência_Transmissão inválida mas não nula ( lembre-se que esses casos já são filtrados pela query efetuada direto no MongoDB), tem essa coluna substituída pela Frequência_Central caso esta seja válida. Isso é feito para que um registro somente seja descartado quando não for possível fazer nenhum processamento para contornar.\nLargura_Emissão(kHz): Valores nulos são preenchidos com o valor 0\nClasse_Emissão: Valores nulos são preenchidos com a string: NI ( Não Informado )\nConstrução da Informação do Canal > Apesar da informação do canal estar cadastrada nas colunas Frequência Inicial, Frequência Final, muitos registros estão ausentes ou simplesmente incorretos. Portanto essas informações são descartadas e o canal é derivado à partir da Frequência_Transmissão e Largura_Emissão(kHz).\n\nO Início e Fim do Canal são construídos da seguinte forma:\n\nInício_Canal = Frequência_Transmissão - Largura_Emissão\nFim_Canal = Frequência_Transmissão + Largura_Emissão\n\n\nMultiplicidade ( Contagem de Estações com as mesmas características ) > Os responsáveis técnicos pela supervisão dos Planos de Monitoração da Anatel definiram as seguintes colunas como índices para agrupar estações: ['UF', 'Código_Município', 'Fistel', 'Frequência_Transmissão', 'Largura_Emissão(kHz)', 'Classe_Emissão'] Em outras palavras, as estações que possuem essas características iguais, são essencialmente idênticas para os fins específicos de detecção no âmbito dos planos de monitoração.\n\nQualquer registro com algum desses dados ainda nulos é excluído - não é possível agrupar registro que possua alguma coluna com valor nulo\nO seguir os registros são agrupados segundo as colunas supracitadas e a contagem de cada grupo único é registrada na coluna Multiplicidade\n\nValidação dos Canais\n\nCarregado arquivo de canalização do serviço, previamente construído à partir da Resolução nº 757, de 08 de novembro de 2022\nPara cada registro da base já agregada a canalização é validada da seguinte forma:\n\nO canal é cruzado com o arquivo de canalização e checado se o canal está contido num bloco único ou num conjunto de blocos adjacentes dentro de uma das faixas autorizadas. As seguintes informações adicionais são incluídas:\n\nCanalização: Válido | Inválido\n\nFaixa: Faixa na qual o canal pertence\nBlocos: Bloco ou Blocos adjacentes que contém o canal\nOffset: Anotado o Offset Downlink <-> Uplink do bloco ou blocos do Canal\n\n\nO registro nesse caso é referente ao Downlink, esse valor de Offset será usado para definirmos a frequência de Uplink\n\n\n\nDerivação da Frequência de *Uplink*\n\nVerificação da consistência dos blocos de Downlink\n\n\nPara cada canal validado pelo, se estiver contido em mais de um bloco, os blocos devem ser adjacentes e possuir somente 1 valor de Offset\n\n\nFiltrados registros com canalização Inválido\nFiltrados registros com Offset=0 e|ou Largura_Emissão=0\n\n\nNesse caso a Frequência de Uplink é igual à Frequência de Downlink e o registro vale para ambos os casos\n\n\nCriada Frequência de Uplink: Frequência_Uplink = Frequência_Downlink - Offset\nConcatenado na base os registros derivados de Uplink\n\n\nNesse caso são os mesmos dados dos registros válidos de Downlink mas com a frequência ( orinalmente de Downlink ) substituída pela frequência derivada de Uplink\n\nSubstituição de Coordenadas para os registros agrupados\n\nPara os registros que possuem Multiplicidade=1, não houve agregação e a estação é única. Para esses a coordenada da estação é mantida.\nPara todos os demais registros as coordenadas são substituídas pela coordenada do município, à partir do Código_Município presente no registro.\n\nOutro tipo de processamento, como imputar uma média das coordenadas por exemplo, não agrega valor “fiscalizatório” porque gera uma coordenada que não existe. A substituição pela coordenada central do município tem o propósito simplesmente de dar a localidade na qual aquele conjunto de estações pertence.\n\n\nFormatação Final\n\nConcatenada a informação sobre a Tecnologia na coluna Classe_Emissão\nStatus: Inserido nessa coluna um valor único L para indicar que é licenciada\nFonte: MOS ( MOSAICO ) para o Downlink e DOC para o Uplink\n\nEsse valor DOC vem de Documentação, termo usado genericamente aqui para indicar todos os registros “criados” e não presentes numa base específica, como é o caso aqui dos valores de Uplink\n\nClasse: Inserido os valores FB (Fixa Base) e ML (Móvel) para os registros de Downlink e Uplink respectivamente\n\n\n\n\nCode\nprint(f'A base do MOSAICO - SMP possui atualmente {len(df)} registros extraídos ativos')\nprint(f'e {len(df2)} registros resultados processados pelos critérios descritos.')\n\n\nA base do MOSAICO - SMP possui atualmente 1977611 registros extraídos ativos\ne 293613 registros resultados processados pelos critérios descritos."
  },
  {
    "objectID": "index.html#aeronáutica",
    "href": "index.html#aeronáutica",
    "title": "RFDataHub",
    "section": "AERONÁUTICA 🛬",
    "text": "AERONÁUTICA 🛬\nAlém de prover uma API que extrai, limpa, processa e padroniza os dados de estações licenciadas na Anatel - relevantes para a Identificação de Emissões no âmbito dos Planos de Monitoração - Outro diferencial são os dados adicionais de emissões aeronáuticas extraídos e consolidados provenientes de diversas fontes, em sua maioria sem registro “oficial” na Anatel.\nAs fontes de dados aeronáuticos são:\n\nICAO - Através do Software Frequency Finder são filtradas e exportadas as emissões do Brasil\nAPI do AISWEB\n\nTodos as emissões de Aeródromos Públicos e Militares\n\nAPI do GEOAISWEB\n\nEmissões do tipo VOR, NDB e DME\n\nAPI do REDEMET\n\nEspecificamente dados de radares meteorológicos\n\nArquivo de Radares\n\nDados adicionais de Radares Secundários nas frequências 1030MHz e 1090MHz com frequência e localização conhecida, disponível por documentação interna.\n\nArquivo de Canalização\n\nEste arquivo, também criado por meio de documentação interna, mapeia os canais das frequências do tipo VOR_ILSLoc, nas frequências adicionais ILS glide, DME Airborne e DME Ground.\n\n\n\n\nimage.png\n\n\n\nOs registros presentes nas bases da aeronáutica, normalmente só contém registros das frequências VOR_ILSLoc, no entanto para os canais listados as demais frequências estão presentes e como parte do pós-processamento essas frequências são imputadas mantendo a mesma descrição e localização.\n\n\n\nPós-Processamento\nNão cabe descrever aqui como é implementado o código para consumir as APIs, alguns são um tanto complexos como o AISWEB, para tal basta consultar a documentação ou investigar diretamente os módulos python no entanto o processamento resultante é simples de descrever:\n\nMapeamento das frequências VOR_ILSLoc no arquivo de canais. As frequências adicionais presentes nos canais são adicionadas no arquivo final.\nComo existe sobreposição de registros, i.e. as bases não são individualizadas, os registros são mapeados entre si e caso estejam a uma distância menor que uma distância de referência ( normalmente uma margem bem ampla de 10Km ou 20Km) os registros são mesclados, mantendo-se a coordenada do registro original do icao e a descrição de ambos é concatenada.\n\n\n\nCode\ndf = pd.read_parquet(pasta / 'aero.parquet.gzip')\nfor c in ['Latitude', 'Longitude']:\n    df[c] = df[c].astype('float')\ndf.sample(5).iloc[:, :6]\n\n\n\n\n\n\n  \n    \n      \n      Frequency\n      Latitude\n      Longitude\n      Description\n    \n  \n  \n    \n      2874\n      2800.0\n      -22.464277\n      -43.297478\n      [RMET] Radar - Pico do Couto/RJ\n    \n    \n      589\n      1164.0\n      -9.516666\n      -35.783333\n      [DOC] VOR/DME, MACEIO (Ground-based DME)\n    \n    \n      533\n      115.8\n      -21.984562\n      -47.344501\n      [AISG] VOR - PIRASSUNUNGA CH 105X\n    \n    \n      2375\n      131.6\n      -19.373888\n      -43.582779\n      [ICAO] AOC U 100/100, CONFINS\n    \n    \n      842\n      119.65\n      -19.373888\n      -43.582779\n      [ICAO] APP-U C-150/450, CONFINS"
  },
  {
    "objectID": "index.html#validação-de-coordenadas",
    "href": "index.html#validação-de-coordenadas",
    "title": "RFDataHub",
    "section": "Validação de Coordenadas ✅",
    "text": "Validação de Coordenadas ✅\n\n\nCode\ndf = pd.read_parquet(pasta / 'base.parquet.gzip')\nfor c in ['Latitude', 'Longitude']:\n    df[c] = df[c].astype('float')\ndf.sample(5).iloc[:, :6]\n\n\n\n\n\n\n  \n    \n      \n      Frequência\n      Entidade\n      Fistel\n      Número_Estação\n      Município\n      Código_Município\n    \n  \n  \n    \n      176758\n      166.45625\n      CONCESSIONARIA BR-040 S.A.\n      50411716298\n      1000516528\n      \n      3146107\n    \n    \n      788342\n      458.025\n      EMPRESA BRASILEIRA DE INFRA-ESTRUTURA AEROPORT...\n      11030016470\n      684830337\n      \n      1100205\n    \n    \n      92400\n      157.45625\n      AMAZONAS DISTRIBUIDORA DE ENERGIA S/A\n      50403650801\n      1002539185\n      \n      1302603\n    \n    \n      477613\n      407.1\n      Oi S.a. - em Recuperacao Judicial\n      04030120318\n      327632062\n      <NA>\n      3127354\n    \n    \n      739091\n      149.33\n      PREFEITURA DO MUNICIPIO DE VALINHOS\n      50012992097\n      683172255\n      \n      3556206\n    \n  \n\n\n\n\nVimos superficialmente nos parágrafos anteriores que além haver muitos registros sem coordenadas - como no MOSAICO - SRD - muitas coordenadas não são válidas, seja por inversão de sinal, lugar incorreto do divisor decimal, inversão da Latitude com a Longitude ou simplesmente não correspondem ao município no qual estão licenciadas.\nOs passos para validar as informações de localização são:\n\nOs arquivos descritos anteriormente são concatenados, exceto os dados da aeronáutica por não conter o Código_Município\nOs registros com Código_Município ausentes são excluídos - este dado é necessário para validar se a coordenadas estão contidas corretamente no município.\nAs dados de localização - a saber Código_Município, Latitude, Longitude - são repassados para uma query SQL que busca na base CORPORATIVO.dbo.TB_IBGE_MUNICIPIO e checa se as coordenadas estão contidas no polígono característico descrito pelo Código_Município, retornando Verdadeiro caso positivo e Falso caso contrário:\n\n    SELECT \n        mun.NO_MUNICIPIO \n        , mun.NU_LONGITUDE \n        , mun.NU_LATITUDE         \n        , CONVERT(int, \n            (mun.GE_POLIGONO.STIntersects(geometry::STGeomFromText(\n                'POINT({} {})', \n                mun.GE_POLIGONO.STSrid)\n            )) \n        )AS COORD_VALIDA\n    FROM \n        CORPORATIVO.dbo.TB_IBGE_MUNICIPIO mun\n    WHERE\n        MUN.CO_MUNICIPIO = {}\n\nAlém disso é retornado o nome padronizado do Município e suas coordenadas como registrado oficialmente no IBGE"
  },
  {
    "objectID": "index.html#arquivo-final",
    "href": "index.html#arquivo-final",
    "title": "RFDataHub",
    "section": "Arquivo Final🗄️",
    "text": "Arquivo Final🗄️\nO Arquivo final disponibilizado para as atividades de monitoração é formatado da seguinte forma:\n\nArquivo base com os dados da Anatel com as seguintes colunas:\n\nFrequência\nNúmero_Serviço\nNúmero_Estação\nClasse_Emissão\nLargura_Emissão(kHz)\n\nPara simplificação de como os dados são apresentados, é criada a coluna Descrição com as seguintes colunas aglutinadas:\n\nFonte - Qual das bases acima é originário o registro\nStatus\nClasse\nEntidade\nFistel\n#Estação - Número_Estação+ Multiplicidade\nMunicípio_IBGE\nUF\nA coluna Município é substituída pela coluna Município_IBGE, por esta estar completa e validada através do Código_Município\nOs registros que não possuem coordenadas ou estas foram considerados inválidas têm suas coordenadas substituídas pela coordenada do município.\n\nPara esses registros, é inserido o sinal * ao final da Descrição.\n\n\nArquivo pós-processado com os dados aeronáuticos\nMesclagem dos dados aeronáuticos com os registros da Anatel, nos mesmos moldes que os dados aeronáuticos foram mesclados entre si. Nesse caso os dados da Anatel são mantidos e a Descrição da estação aeronáutica concatenada com a Descrição da estação da Anatel.\nAdição de uma coluna numérica identificadora da emissão: #1, #2, #3, ...\n\n\n\nCode\ndf = pd.read_parquet(pasta / 'AnatelDB.parquet.gzip')\nfor c in ['Latitude', 'Longitude']:\n    df[c] = df[c].astype('float')\ndf.sample(5)\n\n\n\n\n\n\n  \n    \n      \n      Id\n      Frequency\n      Latitude\n      Longitude\n      Description\n      Service\n      Station\n      Class\n      BW\n    \n  \n  \n    \n      237679\n      #237680\n      167.81875\n      -19.867044\n      -43.925735\n      [MOS] L, FX, Policia Militar Do Estado De Mina...\n      19\n      1001757839\n      F1E\n      8.1\n    \n    \n      293084\n      #293085\n      168.18125\n      -28.566111\n      -48.792500\n      [MOS] L, FB, Fundo De Melhoria Do Corpo De Bom...\n      19\n      1012937884\n      F1D\n      7.6\n    \n    \n      102419\n      #102420\n      156.75000\n      -22.873041\n      -43.110451\n      [STEL] L, FP, Pilot Boat Transportes Maritimos...\n      604\n      1007270346\n      F3E\n      11.0\n    \n    \n      385774\n      #385775\n      245.47500\n      -4.163056\n      -42.013611\n      [MOS] L, FX, Telemar Norte Leste S.A. Em Recup...\n      175\n      691448892\n      F3E\n      16.0\n    \n    \n      30865\n      #30866\n      87.90000\n      -9.851666\n      -57.824165\n      [SRD] RADCOM, 1-A, Associação Comunitária De N...\n      231\n      1015224919\n      NI\n      256.0"
  }
]